using System;
using System.Linq;
using System.Security.Claims;
using KLTN.Helpers;
using KLTN.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace KLTN.Controllers
{
    public class AppointmentController : Controller
    {
        private readonly KLTNContext _context;
        private readonly EmailService _emailService;

        public AppointmentController(KLTNContext context, EmailService emailService)
        {
            _context = context;
            _emailService = emailService;
        }

        [HttpPost]
        [Authorize]
        public IActionResult Create([FromBody] Appointment appointment)
        {
            if (appointment == null || appointment.HouseId <= 0)
            {
                return Json(new { success = false, message = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá." });
            }

            var userId = HttpContext.Session.GetInt32("UserId");

            if (userId == null)
            {
                return Json(new { success = false, message = "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t l·ªãch." });
            }

            var user = _context.Accounts.FirstOrDefault(u => u.IdUser == userId.Value);

            appointment.UserId = userId.Value;
            appointment.Status = AppointmentStatus.Pending;

            // KH√îNG c·∫Øt gi·ªù n·ªØa
            // appointment.AppointmentDate = appointment.AppointmentDate.Date;

            // G·ª≠i th√¥ng b√°o cho ch·ªß nh√†
            var house = _context.Houses.Find(appointment.HouseId);
            if (house != null)
            {
                var notification = new Notification
                {
                    UserId = house.IdUser,
                    Message =
                        $"üìÖ {user.UserName} ƒë√£ ƒë·∫∑t l·ªãch h·∫πn v√†o {appointment.AppointmentDate:dd/MM/yyyy HH:mm}.",
                    CreatedAt = DateTime.Now,
                    IsRead = false,
                };

                _context.Notifications.Add(notification);
                _context.SaveChanges();
            }

            _context.Appointments.Add(appointment);
            _context.SaveChanges();

            return Json(
                new
                {
                    success = true,
                    message = "ƒê·∫∑t l·ªãch th√†nh c√¥ng! Vui l√≤ng ch·ªù ng∆∞·ªùi ƒëƒÉng tin x√°c nh·∫≠n.",
                }
            );
        }

        // // Hi·ªÉn th·ªã danh s√°ch l·ªãch h·∫πn
        // [Authorize]
        // public IActionResult Index()
        // {
        //     var userId = HttpContext.Session.GetInt32("UserId");

        //     var appointments = _context
        //         .Appointments.Include(a => a.User)
        //         .Include(a => a.House)
        //         .Where(a => a.House.IdUser == userId && a.AppointmentDate >= DateTime.Now) // L·ªçc theo ch·ªß b√†i ƒëƒÉng
        //         .OrderBy(a => a.AppointmentDate)
        //         .ToList();

        //     return View(appointments);
        // }

        [Authorize]
        public IActionResult Index(string filter = "valid")
        {
            var userId = HttpContext.Session.GetInt32("UserId");
            var now = DateTime.Now;

            IQueryable<Appointment> query = _context
                .Appointments.Include(a => a.User)
                .Include(a => a.House)
                .Where(a => a.House.IdUser == userId);

            if (filter == "expired")
            {
                query = query.Where(a => a.AppointmentDate < now);
            }
            else // default: valid
            {
                query = query.Where(a => a.AppointmentDate >= now);
            }

            var appointments = query.OrderBy(a => a.AppointmentDate).ToList();

            ViewBag.Filter = filter;
            return View(appointments);
        }

        [HttpPost]
        [Authorize]
        public async Task<IActionResult> Confirm(int id)
        {
            var appointment = await _context
                .Appointments.Include(a => a.User)
                .Include(a => a.House)
                .ThenInclude(h => h.HouseDetails) // D√πng housedetail ƒë·ªÉ l·∫•y th√¥ng tin ƒë·ªãa ch·ªâ
                .FirstOrDefaultAsync(a => a.AppointmentId == id);

            if (appointment == null)
            {
                return Json(new { success = false, message = "L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i!" });
            }

            if (appointment.Status != AppointmentStatus.Pending)
            {
                return Json(new { success = false, message = "L·ªãch h·∫πn n√†y kh√¥ng th·ªÉ x√°c nh·∫≠n!" });
            }

            appointment.Status = AppointmentStatus.Confirmed;
            await _context.SaveChangesAsync();

            // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi ƒë·∫∑t l·ªãch
            var notification = new Notification
            {
                UserId = appointment.UserId, // Ng∆∞·ªùi ƒë·∫∑t l·ªãch nh·∫≠n th√¥ng b√°o
                Message =
                    $"‚úÖ L·ªãch h·∫πn v√†o {appointment.AppointmentDate:dd/MM/yyyy HH:mm} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.",
                CreatedAt = DateTime.Now,
                IsRead = false,
            };

            _context.Notifications.Add(notification);
            await _context.SaveChangesAsync();

            // G·ª≠i email th√¥ng b√°o x√°c nh·∫≠n l·ªãch h·∫πn
            if (appointment.User != null)
            {
                string toEmail = appointment.User.Email;
                string subject = "L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!";
                string body =
                    $@"
                    <p>Xin ch√†o <b>{appointment.User.UserName}</b>,</p>
                    <p>L·ªãch h·∫πn xem nh√† c·ªßa b·∫°n v√†o ng√†y <b>{appointment.AppointmentDate:dd/MM/yyyy HH:mm}</b> 
                    t·∫°i nh√† tr·ªç <b>{appointment.House?.NameHouse}</b> ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.</p>
                    <p><b>ƒê·ªãa ch·ªâ:</b> {appointment .House?.HouseDetails.FirstOrDefault() ?.Address ?? "Kh√¥ng c√≥ ƒë·ªãa ch·ªâ"}</p>
                    <p>Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù!</p>
                    <br>
                    <p>Tr√¢n tr·ªçng,<br>H·ªá Th·ªëng ƒê·∫∑t L·ªãch H·∫πn</p>";

                await _emailService.SendEmailAsync("Appointment", toEmail, subject, body);
            }

            return Json(
                new
                {
                    success = true,
                    message = "L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† email ƒë√£ g·ª≠i th√†nh c√¥ng!",
                }
            );
        }

        // H·ªßy l·ªãch h·∫πn v√† g·ª≠i th√¥ng b√°o cho ng∆∞·ªùi ƒë·∫∑t l·ªãch
        [HttpPost]
        [Authorize]
        public async Task<IActionResult> Cancel(int id)
        {
            var appointment = await _context
                .Appointments.Include(a => a.User)
                .Include(a => a.House)
                .FirstOrDefaultAsync(a => a.AppointmentId == id);

            if (appointment == null)
            {
                return Json(new { success = false, message = "L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i!" });
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn
            appointment.Status = AppointmentStatus.Cancelled;
            await _context.SaveChangesAsync();

            // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi ƒë·∫∑t l·ªãch
            var notification = new Notification
            {
                UserId = appointment.UserId, // G·ª≠i cho ng∆∞·ªùi ƒë·∫∑t l·ªãch
                Message =
                    $"‚ùå L·ªãch h·∫πn v√†o {appointment.AppointmentDate:dd/MM/yyyy} t·∫°i {appointment.House?.NameHouse} ƒë√£ b·ªã h·ªßy.",
                CreatedAt = DateTime.Now,
                IsRead = false,
            };

            _context.Notifications.Add(notification);
            await _context.SaveChangesAsync();

            // G·ª≠i email cho ng∆∞·ªùi ƒë·∫∑t l·ªãch h·∫πn
            if (appointment.User != null)
            {
                string toEmail = appointment.User.Email;
                string subject = "L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy!";
                string body =
                    $@"
                    <p>Xin ch√†o <b>{appointment.User.UserName}</b>,</p>
                    <p>L·ªãch h·∫πn xem nh√† c·ªßa b·∫°n v√†o ng√†y <b>{appointment.AppointmentDate:dd/MM/yyyy HH:mm}</b> 
                    t·∫°i nh√† tr·ªç <b>{appointment.House?.NameHouse}</b> ƒë√£ b·ªã h·ªßy b·ªüi ch·ªß nh√†.</p>
                    <p>Vui l√≤ng ki·ªÉm tra l·∫°i c√°c l·ªãch h·∫πn c·ªßa b·∫°n tr√™n h·ªá th·ªëng.</p>
                    <br>
                    <p>Tr√¢n tr·ªçng,<br>H·ªá Th·ªëng ƒê·∫∑t L·ªãch H·∫πn</p>";

                await _emailService.SendEmailAsync("Appointment", toEmail, subject, body);
            }

            return Json(
                new { success = true, message = "L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy v√† th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i!" }
            );
        }

        [HttpPost]
        [Authorize]
        public IActionResult DeleteSelected([FromBody] List<int> appointmentIds)
        {
            if (appointmentIds == null || !appointmentIds.Any())
            {
                return Json(new { success = false, message = "Kh√¥ng c√≥ l·ªãch h·∫πn n√†o ƒë∆∞·ª£c ch·ªçn." });
            }

            var userId = HttpContext.Session.GetInt32("UserId");
            if (userId == null)
            {
                return Json(
                    new
                    {
                        success = false,
                        message = "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.",
                    }
                );
            }

            var appointmentsToDelete = _context
                .Appointments.Include(a => a.House)
                .Where(a => a.House.IdUser == userId && appointmentIds.Contains(a.AppointmentId))
                .ToList();

            if (!appointmentsToDelete.Any())
            {
                return Json(
                    new { success = false, message = "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn h·ª£p l·ªá ƒë·ªÉ x√≥a." }
                );
            }

            _context.Appointments.RemoveRange(appointmentsToDelete);
            _context.SaveChanges();

            return Json(new { success = true, message = "ƒê√£ x√≥a c√°c l·ªãch h·∫πn ƒë√£ ch·ªçn!" });
        }

        // Hi·ªÉn th·ªã l·ªãch h·∫πn c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t
        [Authorize]
        public IActionResult MyAppointments(string filter = "valid")
        {
            var userId = HttpContext.Session.GetInt32("UserId");
            var now = DateTime.Now;

            if (userId == null)
            {
                return RedirectToAction("Login", "Account");
            }

            IQueryable<Appointment> query = _context
                .Appointments.Include(a => a.House)
                .ThenInclude(h => h.IdUserNavigation)
                .Where(a => a.UserId == userId); // Ng∆∞·ªùi ƒë·∫∑t l·ªãch l√† ch√≠nh user

            if (filter == "expired")
            {
                query = query.Where(a => a.AppointmentDate < now);
            }
            else
            {
                query = query.Where(a => a.AppointmentDate >= now);
            }

            var appointments = query.OrderBy(a => a.AppointmentDate).ToList();

            ViewBag.Filter = filter;
            return View("MyAppointments", appointments);
        }
    }
}
