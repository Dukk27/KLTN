@model List<KLTN.ViewModels.ManageChatViewModel>

<head>
    <link rel="stylesheet" href="~/css/iziToast.css">
    <link rel="stylesheet" href="~/css/Admin/responsive.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/js/iziToast.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/css/iziToast.min.css">
    <link rel="stylesheet" href="~/css/Admin/account.css">
</head>

<body>
    <h3 class="text-center mt-3">Qu·∫£n l√Ω chat</h3>

    <div class="row mb-3">
        <div class="col-12 col-md-4">
            <input type="text" id="searchInput" class="form-control" placeholder="üîç T√¨m ki·∫øm ƒëo·∫°n chat...">
        </div>
    </div>

    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>T√™n h·ªôi tho·∫°i</th>
                <th>N·ªôi dung</th>
                <th>H√†nh ƒë·ªông</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var chat in Model)
            {
                <tr>
                    <td>@chat.ConversationName</td>

                    <td>
                        <div style="max-height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 5px;">
                            <ul class="list-unstyled">
                                @foreach (var msg in chat.Content)
                                {
                                    <li>
                                        <strong>@msg.Sender:</strong> @msg.Content
                                        <span class="text-muted" style="font-size: 12px;">(@msg.Timestamp)</span>
                                    </li>
                                }
                            </ul>
                        </div>
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm delete-chat" data-conversation="@chat.ConversationId">
                            X√≥a h·ªôi tho·∫°i
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <script>
        document.addEventListener("click", function (event) {
            if (event.target.classList.contains("delete-chat")) {
                let button = event.target;
                let conversationId = button.getAttribute("data-conversation");

                iziToast.question({
                    class: "iziToast-custom",
                    timeout: 20000,
                    close: false,
                    overlay: true,
                    displayMode: "once",
                    id: "question",
                    title: "X√°c nh·∫≠n",
                    message: "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a cu·ªôc h·ªôi tho·∫°i n√†y?",
                    position: "center",
                    icon: "fa fa-question-circle",
                    buttons: [
                        ["<button><b>ƒê·ªìng √Ω</b></button>", function (instance, toast) {
                            fetch("/Admin/DeleteChat", {
                                method: "POST",
                                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                                body: new URLSearchParams({ conversationId: conversationId })
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        iziToast.success({
                                            title: "Th√†nh c√¥ng",
                                            message: "H·ªôi tho·∫°i ƒë√£ ƒë∆∞·ª£c x√≥a!",
                                            position: "topRight",
                                            timeout: 1000
                                        });

                                        let row = button.closest("tr");
                                        if (row) {
                                            row.style.transition = "opacity 0.5s";
                                            row.style.opacity = "0";
                                            setTimeout(() => row.remove(), 500);
                                        }
                                    } else {
                                        iziToast.error({
                                            title: "L·ªói",
                                            message: data.message,
                                            position: "topRight"
                                        });
                                    }
                                });

                            instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                        }, true],

                        ["<button>H·ªßy</button>", function (instance, toast) {
                            instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                        }]
                    ]
                });
            }
        });
        // T√¨m ki·∫øm 
        $("#searchInput").on("keyup", function () {
            const value = $(this).val().toLowerCase();
            $("table tbody tr").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
            });
        });
    </script>
</body>