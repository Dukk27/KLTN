@model IEnumerable<KLTN.Models.Review>

<head>
    <link rel="stylesheet" href="~/css/iziToast.css">
    <link rel="stylesheet" href="~/css/Admin/responsive.css">
    <link rel="stylesheet" href="~/css/Admin/review.css">
</head>
 
<body>
    <h3 class="text-center mt-3">Quản lý bình luận</h3>

    @if (Model.Any()) 
    {
        <div class="row mb-3 mt-3">
            <div class="col-12 col-md-4">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-search"></i>
                    </span>
                
                    <input type="text" id="searchInput" class="form-control" placeholder="Tìm kiếm bình luận...">
                </div>
            </div>
            <div class="col-12 col-md-3">
                <input type="date" id="dateFilter" class="form-control" placeholder="Chọn ngày">
            </div>
            <div class="col-12 col-md-3">
                <select id="reviewerFilter" class="form-control">
                    <option value="">-- Lọc theo người đánh giá --</option>
                    @foreach (var reviewer in Model.Select(r => r.IdUserNavigation?.UserName).Distinct())
                    {
                        <option value="@reviewer">@reviewer</option>
                    }
                </select>
            </div>
            <div class="col-12 col-md-2 d-flex justify-content-end">
                <button class="btn btn-danger delete-selected-btn" disabled>
                    <i class="fas fa-trash-alt"></i>&nbsp;Xóa bình luận đã chọn
                </button>
            </div>
        </div>

        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th><input type="checkbox" id="select-all"></th>
                    <th>Người đánh giá</th>
                    <th>Tiêu đề bài đăng</th>
                    <th>Nội dung</th>
                    <th>Mức sao đánh giá</th>
                    <th>Ngày đánh giá</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var review in Model)
                {
                    <tr>
                        <td><input type="checkbox" class="review-checkbox" value="@review.IdReview"></td>
                        <td>@review.IdUserNavigation?.UserName</td>
                        <td>
                            <a href="@Url.Action("Detail", "Home", new { id = review.IdHouseNavigation?.IdHouse })"class="house-link">
                                @review.IdHouseNavigation?.NameHouse
                            </a>
                        </td>                        
                        <td>@review.Content</td>
                        <td>@review.Rating</td>
                        <td>@review.ReviewDate?.ToString("dd/MM/yyyy")</td>
                    </tr>
                }
            </tbody>
        </table>
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mt-3" id="pagination"></ul>
        </nav>
    }
    else
    {
        <div class="no-reviews">Không có bình luận.</div>
    }

    <!-- Thêm thư viện iziToast -->
    <script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css">

    <script>
        $(document).ready(function () {
            // Xóa từng bình luận
            $(".delete-review").on("click", function () {
                const id = $(this).data("id");
                confirmDelete([id]);
            });

            // Xóa nhiều bình luận đã chọn
            $(".delete-selected-btn").on("click", function () {
                const selectedIds = $(".review-checkbox:checked").map(function () {
                    return $(this).val();
                }).get();

                if (selectedIds.length === 0) return;
                confirmDelete(selectedIds);
            });

            // Chọn tất cả checkbox
            $("#select-all").on("change", function () {
                $(".review-checkbox").prop("checked", this.checked);
                toggleDeleteSelectedButton();
            });

            // Khi chọn checkbox riêng lẻ
            $(document).on("change", ".review-checkbox", function () {
                $("#select-all").prop("checked", $(".review-checkbox:checked").length === $(".review-checkbox").length);
                toggleDeleteSelectedButton();
            });

            // Bật/tắt nút "Xóa đã chọn"
            function toggleDeleteSelectedButton() {
                $(".delete-selected-btn").prop("disabled", $(".review-checkbox:checked").length === 0);
            }

            // Xác nhận xóa
            function confirmDelete(ids) {
                iziToast.show({
                    class: "iziToast-custom",
                    title: "Xác nhận xóa",
                    message: `Bạn có chắc muốn xóa ${ids.length > 1 ? "các bình luận" : "bình luận"} đã chọn?`,
                    position: "center",
                    timeout: false,
                    close: false,
                    overlay: true,
                    icon: "fa fa-question-circle",
                    displayMode: "once",
                    buttons: [
                        [
                            '<button><i class="fa fa-trash"></i> Xóa</button>',
                            function (instance, toast) {
                                instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                                $.ajax({
                                    url: "@Url.Action("DeleteSelectedReviews", "Admin")",
                                    type: "POST",
                                    contentType: "application/json",
                                    data: JSON.stringify(ids),
                                    success: function (response) {
                                        iziToast.show({
                                            title: response.success ? "Thành công!" : "Lỗi!",
                                            message: response.message,
                                            position: "topRight",
                                            color: response.success ? "green" : "red",
                                            timeout: 1000
                                        });

                                        if (response.success) {
                                            ids.forEach(id => {
                                                $(`tr:has(input[value='${id}'])`).remove(); // Xóa hàng dựa vào checkbox
                                            });

                                            toggleDeleteSelectedButton();
                                            checkAndShowNoReviews();
                                        }
                                    },
                                    error: function () {
                                        iziToast.error({
                                            title: "Lỗi!",
                                            message: "Đã xảy ra lỗi khi xóa bình luận.",
                                            position: "topRight"
                                        });
                                    }
                                });
                            },
                            true
                        ],
                        [
                            '<button><i class="fa fa-times"></i> Hủy</button>',
                            function (instance, toast) {
                                instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                            }
                        ]
                    ]
                });
            }

            @* // Kiểm tra nếu không còn bình luận, hiển thị thông báo
            function checkAndShowNoReviews() {
                if ($(".review-checkbox").length === 0) {
                    $(".table").remove();
                    $(".delete-selected-btn").remove();
                    if ($(".no-reviews").length === 0) {
                        $("h3").after('<div class="no-reviews">Chưa có bình luận nào.</div>');
                    }
                }
            } *@
        });

        $(document).ready(function () {
            $(".delete-review").on("click", function () {
                const id = $(this).data("id");

                iziToast.show({
                    class: "iziToast-custom",
                    title: "Xác nhận xóa",
                    message: "Bạn có chắc muốn xóa bình luận này?",
                    position: "center",
                    timeout: false,
                    close: false,
                    overlay: true,
                    displayMode: "once",
                    drag: false,
                    buttons: [
                        [
                            '<button><i class="fa fa-check"></i> Có, xóa</button>',
                            function (instance, toast) {
                                instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                                $.post("@Url.Action("DeleteReview", "Admin")", { id: id }, function (response) {
                                    iziToast.show({
                                        title: response.success ? "Thành công!" : "Lỗi!",
                                        message: response.message,
                                        position: "topRight",
                                        color: response.success ? "green" : "red",
                                        timeout: 1000
                                    });

                                    if (response.success) {
                                        $(`tr:has(button[data-id='${id}'])`).remove(); // Xóa hàng khỏi bảng mà không reload
                                    }
                                }).fail(() => {
                                    iziToast.error({
                                        title: "Lỗi!",
                                        message: "Đã xảy ra lỗi khi xóa bình luận.",
                                        position: "topRight"
                                    });
                                });
                            },
                            true
                        ],
                        [
                            '<button><i class="fa fa-times"></i> Hủy</button>',
                            function (instance, toast) {
                                instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                            }
                        ]
                    ]
                });
            });
        });

        // Lọc theo từ khóa tìm kiếm
        $("#searchInput").on("keyup", function () {
            const value = $(this).val().toLowerCase();
            console.log("Tìm kiếm: ", value);
            filterReviews(value, $("#dateFilter").val(), $("#reviewerFilter").val());
        });

        // Lọc theo ngày
        $("#dateFilter").on("change", function () {
            const selectedDate = $(this).val();
            console.log("Ngày lọc: ", selectedDate);
            filterReviews($("#searchInput").val(), selectedDate, $("#reviewerFilter").val());
        });

        // Lọc theo người đánh giá
        $("#reviewerFilter").on("change", function () {
            const selectedReviewer = $(this).val();
            console.log("Người đánh giá: ", selectedReviewer);
            filterReviews($("#searchInput").val(), $("#dateFilter").val(), selectedReviewer);
        });

        // Hàm lọc bình luận
        function filterReviews(searchText, selectedDate, selectedReviewer) {
            $("table tbody tr").each(function () {
                const reviewText = $(this).text().toLowerCase();
                const reviewDate = $(this).find("td:eq(5)").text().trim(); // Ngày ở cột thứ 6 (index 5)
                const reviewerName = $(this).find("td:eq(1)").text().trim(); // Người đánh giá ở cột thứ 2 (index 1)

                // Chuyển ngày trong bảng về định dạng yyyy-MM-dd để so sánh
                const formattedReviewDate = formatDateForComparison(reviewDate);

                // Kiểm tra điều kiện lọc
                const matchesSearch = searchText === "" || reviewText.indexOf(searchText.toLowerCase()) > -1;
                const matchesDate = selectedDate === "" || formattedReviewDate === selectedDate;
                const matchesReviewer = selectedReviewer === "" || reviewerName === selectedReviewer;

                // Ẩn hoặc hiển thị dòng
                if (matchesSearch && matchesDate && matchesReviewer) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });

            reapplyPagination();
        }

        // Hàm áp dụng phân trang
        function reapplyPagination() {
            paginateTable(10); // Số dòng mỗi trang
        }

        // Hàm phân trang
        function paginateTable(rowsPerPage) {
            const rows = $("table tbody tr:visible");
            const totalRows = rows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage);

            $("#pagination").empty();

            for (let i = 1; i <= totalPages; i++) {
                $("#pagination").append(`
                    <li class="page-item${i === 1 ? " active" : ""}">
                        <a class="page-link" href="#">${i}</a>
                    </li>
                `);
            }

            rows.hide();
            rows.slice(0, rowsPerPage).show();

            $("#pagination .page-link").on("click", function (e) {
                e.preventDefault();
                const page = parseInt($(this).text());

                $("#pagination .page-item").removeClass("active");
                $(this).parent().addClass("active");

                const start = (page - 1) * rowsPerPage;
                const end = start + rowsPerPage;

                rows.hide().slice(start, end).show();
            });
        }

        // Hàm chuyển ngày từ dd/MM/yyyy sang yyyy-MM-dd để so sánh
        function formatDateForComparison(dateString) {
            const dateParts = dateString.split('/');
            const formattedDate = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]); // Tạo ngày theo định dạng yyyy-MM-dd
            const year = formattedDate.getFullYear();
            const month = (formattedDate.getMonth() + 1).toString().padStart(2, '0'); // Thêm số 0 ở trước tháng nếu nhỏ hơn 10
            const day = formattedDate.getDate().toString().padStart(2, '0'); // Thêm số 0 ở trước ngày nếu nhỏ hơn 10
            return `${year}-${month}-${day}`;
        }

        // Gọi lại phân trang khi lọc
        reapplyPagination();
    </script>
</body>