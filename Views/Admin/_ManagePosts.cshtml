@model IEnumerable<KLTN.Models.House>

<head>
    <link rel="stylesheet" href="~/css/iziToast.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="~/css/Admin/account.css"> 
    <style>
        th {
            white-space: nowrap; /* Ngăn việc xuống dòng trong tiêu đề */
            text-align: center; /* Căn giữa các tiêu đề */
        }

        td:last-child {
            white-space: nowrap; /* Ngăn xuống dòng */
            text-align: center; /* Căn giữa nội dung */
        }

        td:last-child .btn {
            margin: 2px; /* Tạo khoảng cách giữa các nút */
        }

        td:last-child {
            display: flex;
            justify-content: center;
            gap: 5px; /* Khoảng cách giữa các nút */
            flex-wrap: wrap; /* Cho phép xuống dòng nếu cần */
        }
    </style>
</head>

<body>
    <h3 class="text-center mt-3">Quản lý bài đăng</h3>

    <div class="row mb-3 mt-3">
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" id="searchInput" class="form-control" placeholder="Tìm kiếm bài đăng..">
            </div>
        </div>
        <div class="col-md-3">
            <select id="statusFilter" class="form-control">
                <option value="">-- Lọc theo trạng thái --</option>
                <option value="Chờ duyệt">Chờ duyệt</option>
                <option value="Đã duyệt">Đã duyệt</option>
                <option value="Bị từ chối">Bị từ chối</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="userFilter" class="form-control">
                <option value="">-- Lọc theo người đăng --</option>
                @foreach (var user in Model.Select(h => h.IdUserNavigation.UserName).Distinct())
                {
                    <option value="@user">@user</option>
                }
            </select>
        </div>
    </div>
    
    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Tiêu đề bài đăng</th>
                    <th>Địa chỉ</th>
                    <th>Giá</th>
                    <th>Người đăng</th>
                    <th>Trạng thái</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var house in Model)
                {
                    @if (house.Status == HouseStatus.Unpaid)
                    {
                        continue; // Bỏ qua bài chưa thanh toán
                    }
                    <tr>
                        <td>@house.IdHouse</td>
                        <td>@house.NameHouse</td>
                        <td>@house.HouseDetails.FirstOrDefault()?.Address</td>
                        <td>@house.HouseDetails.FirstOrDefault()?.Price.ToString("#,0", new System.Globalization.CultureInfo("vi-VN")) VND</td>
                        <td>@house.IdUserNavigation.UserName</td>
                        <td>
                            @if (house.Status == HouseStatus.Pending)
                            {
                                <span class="badge bg-warning text-dark">Chờ duyệt</span>
                            }
                            else if (house.Status == HouseStatus.Approved || house.Status == HouseStatus.Active || house.Status == HouseStatus.Hidden )
                            {
                                <span class="badge bg-success">Đã duyệt</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Bị từ chối</span>
                            }
                        </td>
                        <td>      
                            <div class="action-buttons">
                                <button class="btn btn-sm btn-primary btn-view-detail" onclick="viewDetail(@house.IdHouse, 'house')" title="Xem chi tiết bài đăng"><i class="fas fa-eye"></i></button>          
            
                                @* <button class="btn btn-sm btn-danger delete-house" data-id="@house.IdHouse" title="Xoá bài đăng"><i class="fas fa-trash-alt"></i></button> *@
                                
                                @if (house.Status == HouseStatus.Pending || house.Status == HouseStatus.Rejected)
                                {
                                    <button class="btn btn-sm btn-success approve-house" data-id="@house.IdHouse"><i class="fas fa-check"></i> Duyệt</button>
                                }

                                @if (house.Status == HouseStatus.Approved || house.Status == HouseStatus.Active || house.Status == HouseStatus.Hidden || house.Status == HouseStatus.Pending)
                                {
                                    <button class="btn btn-sm btn-danger reject-house" data-id="@house.IdHouse"><i class="fas fa-times"></i> Từ chối</button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <!-- Thêm thư viện iziToast -->
    <script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css">

    <script>
        function viewDetail(id, type) {
            const url = `/Home/Detail?id=${id}&type=${type}`;
            fetch(url, { method: 'GET' })
                .then(response => {
                    if (response.ok) {
                        window.location.href = url;
                    } else {
                        iziToast.error({
                            title: "Lỗi!",
                            message: "Không thể tải chi tiết. Vui lòng thử lại.",
                            position: "topRight"
                        });
                    }
                })
                .catch(() => {
                    iziToast.error({
                        title: "Lỗi!",
                        message: "Đã xảy ra lỗi khi xử lý yêu cầu.",
                        position: "topRight"
                    });
                });
            }

        $(document).ready(function () {
            let isToastVisible = false;

            $(document).off("click", ".approve-house").on("click", ".approve-house", function () {
                //if (isToastVisible) return; // Nếu đang hiển thị thì không mở thêm
                isToastVisible = true;

                const id = $(this).data("id");

                /* // Kiểm tra điều kiện bài đăng
                $.post("/Admin/ApprovePost", { id: id }, function (response) {
                    if (response.success === false) {
                        iziToast.error({
                            title: "Lỗi!",
                            message: "Bài đăng đang thiếu: <br/>" + response.message,
                            position: "topRight",
                            timeout: 5000
                        });
                        isToastVisible = false; // Đặt lại trạng thái để cho phép hiển thị lần sau
                    } else {  */
                        // Nếu hợp lệ, hiển thị confirm để duyệt bài
                        iziToast.show({
                            class: "iziToast-custom",
                            title: "Xác nhận duyệt",
                            message: "Bạn có chắc muốn duyệt bài đăng này?",
                            position: "center",
                            timeout: false,
                            close: false,
                            overlay: true,
                            icon: "fa fa-question-circle",
                            displayMode: "once",
                            onClosing: function() { // Khi iziToast bị đóng, đặt lại biến
                                isToastVisible = false;
                            },
                            buttons: [
                                [
                                    '<button><i class="fa fa-check"></i> Duyệt</button>',
                                    function (instance, toast) {
                                        isToastVisible = false; // Đặt lại trạng thái để cho phép hiển thị lần sau
                                        instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                                        $.post("@Url.Action("ApprovePost", "Admin")", { id: id }, function (response) {
                                            iziToast.show({
                                                title: response.success ? "Thành công!" : "Lỗi!",
                                                message: response.message,
                                                position: "topRight",
                                                color: response.success ? "green" : "red",
                                                timeout: 1000
                                            });

                                            if (response.success) {
                                                updateStatus(id, "Đã duyệt", "bg-success");
                                                toggleButtons(id, "reject");
                                            }
                                        }).fail(() => {
                                            iziToast.error({
                                                title: "Lỗi!",
                                                message: "Đã xảy ra lỗi khi duyệt bài đăng.",
                                                position: "topRight"
                                            });
                                        });
                                    },
                                    true
                                ],
                                [
                                    '<button><i class="fa fa-times"></i> Hủy</button>',
                                    function (instance, toast) {
                                        isToastVisible = false; // Đặt lại trạng thái để cho phép hiển thị lần sau
                                        instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                                    }
                                ]
                            ]
                        });
                    /* }
                }).fail(() => {
                    iziToast.error({
                        title: "Lỗi!",
                        message: "Đã xảy ra lỗi khi kiểm tra bài đăng.",
                        position: "topRight"
                    });
                    isToastVisible = false; // Đặt lại trạng thái để cho phép hiển thị lần sau
                }); */
            });

            $(document).off("click", ".reject-house").on("click", ".reject-house", function () {
                //if (isToastVisible) return; // Nếu đang hiển thị thì không mở thêm 
                isToastVisible = true;

                const id = $(this).data("id");

                iziToast.show({
                    class: "iziToast-custom",
                    title: 'Xác nhận từ chối',
                    message: 'Vui lòng nhập lý do từ chối bài đăng:',
                    position: 'center',
                    timeout: false,
                    close: false,
                    overlay: true,
                    icon: 'fa fa-question-circle',
                    drag: false,
                    displayMode: 1,
                    inputs: [
                        [
                            '<textarea id="reject-reason" rows="3" placeholder="Nhập lý do..." style="width:100%;resize:none;" required></textarea>',
                            'keyup',
                            function (instance, toast, input, e) {
                                // Kích hoạt input
                            }
                        ]
                    ],
                    onOpening: function(instance, toast){
                        setTimeout(() => {
                            const textarea = toast.querySelector('#reject-reason');
                            if (textarea) textarea.focus();
                        }, 100); // Delay một chút để đảm bảo toast đã render xong
                    },
                    onClosed: function () {
                        isToastVisible = false; 
                    },
                    buttons: [
                        [
                            '<button><i class="fa fa-times"></i> Từ chối</button>',
                            function (instance, toast, button, e, inputs) {
                                const reason = inputs[0].value.trim();

                                if (!reason) {
                                    iziToast.warning({
                                        title: "Cảnh báo",
                                        message: "Vui lòng nhập lý do.",
                                        position: "topRight"
                                    });
                                    return;
                                }

                                instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                                $.post("@Url.Action("RejectPost", "Admin")", { id: id, reason: reason }, function (response) {
                                    iziToast.show({
                                        title: response.success ? "Thành công!" : "Lỗi!",
                                        message: response.message,
                                        position: "topRight",
                                        color: response.success ? "green" : "red",
                                        timeout: 1000
                                    });

                                    if (response.success) {
                                        updateStatus(id, "Bị từ chối", "bg-danger");
                                        toggleButtons(id, "approve");
                                    }
                                }).fail(() => {
                                    iziToast.error({
                                        title: "Lỗi!",
                                        message: "Đã xảy ra lỗi khi từ chối bài đăng.",
                                        position: "topRight"
                                    });
                                });
                            },
                            true
                        ],
                        [
                            '<button><i class="fa fa-times"></i> Hủy</button>',
                            function (instance, toast) {
                                instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                            }
                        ]
                    ]
                });
            });

            // Hàm cập nhật trạng thái trên giao diện
            function updateStatus(id, statusText, statusClass) {
                const statusCell = $(`tr:has(button[data-id='${id}']) td:nth-child(6)`);
                statusCell.html(`<span class="badge ${statusClass}">${statusText}</span>`);
            }
            
            function toggleButtons(id, action) {
                const row = $(`tr:has(button[data-id='${id}'])`);
                const actionCell = row.find("td:last-child .action-buttons");

                if (action === "reject") {
                    // Đã duyệt → Chuyển sang chỉ còn nút từ chối
                    row.find(".approve-house").remove();

                    // Nếu chưa có nút từ chối thì thêm vào
                    if (actionCell.find(".reject-house").length === 0) {
                        actionCell.append(`
                            <button class="btn btn-sm btn-danger reject-house" data-id="${id}">
                                <i class="fas fa-times"></i> Từ chối
                            </button>
                        `);
                    }
                } else if (action === "approve") {
                    // Bị từ chối → Chuyển sang chỉ còn nút duyệt
                    row.find(".reject-house").remove();

                    // Nếu chưa có nút duyệt thì thêm vào
                    if (actionCell.find(".approve-house").length === 0) {
                        actionCell.append(`
                            <button class="btn btn-sm btn-success approve-house" data-id="${id}">
                                <i class="fas fa-check"></i> Duyệt
                            </button>
                        `);
                    }
                }
            }

            // Tìm kiếm bài đăng
            $("#searchInput").on("keyup", function () {
                const value = $(this).val().toLowerCase();
                $("table tbody tr").filter(function () {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });

            // Bộ lọc nâng cao
            function applyFilters() {
                const searchText = $("#searchInput").val().toLowerCase();
                const selectedStatus = $("#statusFilter").val();
                const selectedUser = $("#userFilter").val();

                $("table tbody tr").each(function () {
                    const row = $(this);
                    const rowText = row.text().toLowerCase();
                    const rowStatus = row.find("td:nth-child(6) span").text().trim();
                    const rowUser = row.find("td:nth-child(5)").text().trim();

                    const matchesSearch = rowText.indexOf(searchText) > -1;
                    const matchesStatus = !selectedStatus || rowStatus === selectedStatus;
                    const matchesUser = !selectedUser || rowUser === selectedUser;

                    row.toggle(matchesSearch && matchesStatus && matchesUser);
                });
            }

            // Gọi khi input thay đổi
            $("#searchInput, #statusFilter, #userFilter").on("input change", applyFilters);
        });
    </script>
</body>
