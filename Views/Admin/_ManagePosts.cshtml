@model IEnumerable<KLTN.Models.House>

<head>
    <link rel="stylesheet" href="~/css/iziToast.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="~/css/Admin/account.css"> 
    <style> 
        th {
            text-align: center; /* Căn giữa các tiêu đề */
        }

        td:last-child {
            white-space: nowrap; /* Ngăn xuống dòng */
            text-align: center; /* Căn giữa nội dung */
        }

        td:last-child .btn {
            margin: 2px; /* Tạo khoảng cách giữa các nút */
        }

        td:last-child {
            display: flex;
            justify-content: center;
            gap: 5px; /* Khoảng cách giữa các nút */
            flex-wrap: wrap; /* Cho phép xuống dòng nếu cần */
        }

        .gap-custom {
            gap: 5rem; 
        }

        .fixed-title-column {
            width: 200px;
            white-space: normal;     /* Cho phép xuống dòng */
            overflow-wrap: break-word; /* Ngắt từ nếu quá dài */
            word-break: break-word;  /* Ngắt từ nếu không thể vừa dòng */
        }
    </style>
</head>

<body>
    <h3 class="text-center mt-3">Quản lý bài đăng</h3>

    <div class="row mb-3 mt-3">
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" id="searchInput" class="form-control" placeholder="Tìm kiếm bài đăng..">
            </div>
        </div>
        <div class="col-md-3">
            <select id="statusFilter" class="form-control">
                <option value="">-- Lọc theo trạng thái --</option>
                <option value="Chờ duyệt">Chờ duyệt</option>
                <option value="Đã duyệt">Đã duyệt</option>
                <option value="Bị từ chối">Từ chối</option>
                <option value="Đã ẩn do người đăng/admin">Đã ẩn do người đăng/admin</option>
                <option value="Đã bị ẩn do báo cáo">Đã bị ẩn do báo cáo</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="userFilter" class="form-control">
                <option value="">-- Lọc theo người đăng --</option>
                @foreach (var user in Model.Select(h => h.IdUserNavigation.UserName).Distinct())
                {
                    <option value="@user">@user</option>
                }
            </select>
        </div>
    </div>
    @{
        var total = Model.Count(h => h.Status != HouseStatus.Unpaid);
        var pending = Model.Count(h => h.Status == HouseStatus.Pending);
        var approved = Model.Count(h => h.Status == HouseStatus.Approved || h.Status == HouseStatus.Active);
        var hidden = Model.Count(h => h.Status == HouseStatus.Hidden && h.IsAutoHidden || h.Status == HouseStatus.Hidden);
        var rejected = Model.Count(h => h.Status == HouseStatus.Rejected);
    } 

    <div class="row mb-3 mt-4">
        <div class="col-md-12 d-flex justify-content-start text-center stats-box gap-custom">
            <div>
                <div class="fw-bold">Tổng bài đăng</div>
                <div class="fs-4">@total</div>
            </div>
            <div>
                <div class="fw-bold">Bài đăng chờ duyệt</div>
                <div class="fs-4 text-warning"><u>@pending</u></div>
            </div>
            <div>
                <div class="fw-bold">Bài đăng đã duyệt</div>
                <div class="fs-4 text-success"><u>@approved</u></div>
            </div>
            <div>
                <div class="fw-bold">Bài đăng từ chối duyệt</div>
                <div class="fs-4 text-danger"><u>@rejected</u></div>
            </div>
            <div>
                <div class="fw-bold">Bài đăng đã ẩn</div>
                <div class="fs-4 text-dark"><u>@hidden</u></div>
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th class="fixed-title-column">Tiêu đề bài đăng</th>
                    <th>Địa chỉ</th>
                    <th>Giá</th>
                    <th>Người đăng</th>
                    <th>Thời gian đăng</th>
                    <th>Trạng thái</th>
                    <th>Hành động</th>
                </tr> 
            </thead>
            <tbody>
                @foreach (var house in Model)
                {
                    @if (house.Status == HouseStatus.Unpaid)
                    {
                        continue; // Bỏ qua bài chưa thanh toán
                    }
                    <tr>
                        <td>@house.IdHouse</td>
                        <td class="fixed-title-column">@house.NameHouse</td>
                        <td>@house.HouseDetails.FirstOrDefault()?.Address</td>
                        <td>@house.HouseDetails.FirstOrDefault()?.Price.ToString("#,0", new System.Globalization.CultureInfo("vi-VN")) VND</td>
                        <td>@house.IdUserNavigation.UserName</td>
                        <td>@house.HouseDetails.FirstOrDefault()?.TimePost.ToString("dd/MM/yyyy")</td>
                        <td>
                            @if (house.Status == HouseStatus.Pending)
                            {
                                <span class="badge bg-warning text-dark">Chờ duyệt</span>
                            }
                            else if (house.Status == HouseStatus.Approved || house.Status == HouseStatus.Active)
                            {
                                <span class="badge bg-success">Đã duyệt</span>
                            }
                            else if (house.Status == HouseStatus.Hidden && house.IsAutoHidden)
                            {
                                <span class="badge bg-danger text-wrap" style="white-space: normal; max-width: 100%;">
                                    Đã bị ẩn do báo cáo
                                </span>
                            }
                            else if (house.Status == HouseStatus.Hidden)
                            {
                                <span class="badge bg-secondary text-wrap" style="white-space: normal; max-width: 100%;">
                                    Đã ẩn do người đăng/admin
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Bị từ chối</span>
                            }
                        </td>
                        <td>      
                            <div class="action-buttons">
                                <button class="btn btn-sm btn-primary btn-view-detail" onclick="viewDetail(@house.IdHouse, 'house')" title="Xem chi tiết bài đăng"><i class="fas fa-eye"></i></button>          
            
                                @* <button class="btn btn-sm btn-danger delete-house" data-id="@house.IdHouse" title="Xoá bài đăng"><i class="fas fa-trash-alt"></i></button> *@
                                
                                @if (house.Status == HouseStatus.Pending || house.Status == HouseStatus.Rejected)
                                {
                                    <button class="btn btn-sm btn-success approve-house" data-id="@house.IdHouse"><i class="fas fa-check"></i> Duyệt</button>
                                }

                                @if (house.Status == HouseStatus.Approved || house.Status == HouseStatus.Active || house.Status == HouseStatus.Hidden || house.Status == HouseStatus.Pending)
                                {
                                    <button class="btn btn-sm btn-danger reject-house" data-id="@house.IdHouse"><i class="fas fa-times"></i> Từ chối</button>
                                }
                                @if (house.Status == HouseStatus.Active || house.Status == HouseStatus.Approved)
                                {
                                    <button class="btn btn-sm btn-secondary btn-hide" data-id="@house.IdHouse" title="Ẩn bài đăng">
                                        <i class="fas fa-eye-slash"></i>
                                    </button>
                                }
                                @if (house.Status == HouseStatus.Hidden && !house.IsAutoHidden)
                                {
                                    <button class="btn btn-sm btn-success btn-show" data-id="@house.IdHouse" title="Hiện bài đăng">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mt-3" id="pagination"></ul>
        </nav>
    </div>

    <!-- Thêm thư viện iziToast -->
    <script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css">

    <script>
        function viewDetail(id, type) {
            const url = `/Home/Detail?id=${id}&type=${type}`;
            fetch(url, { method: 'GET' })
                .then(response => {
                    if (response.ok) {
                        window.location.href = url;
                    } else {
                        iziToast.error({
                            title: "Lỗi!",
                            message: "Không thể tải chi tiết. Vui lòng thử lại.",
                            position: "topRight"
                        });
                    }
                })
                .catch(() => {
                    iziToast.error({
                        title: "Lỗi!",
                        message: "Đã xảy ra lỗi khi xử lý yêu cầu.",
                        position: "topRight"
                    });
                });
            }

        $(document).ready(function () {
            let isToastVisible = false;

            $(document).off("click", ".approve-house").on("click", ".approve-house", function () {
                //if (isToastVisible) return; // Nếu đang hiển thị thì không mở thêm
                isToastVisible = true;

                const id = $(this).data("id");

                iziToast.show({
                    class: "iziToast-custom",
                    title: "Xác nhận duyệt",
                    message: "Bạn có chắc muốn duyệt bài đăng này?",
                    position: "center",
                    timeout: false,
                    close: false,
                    overlay: true,
                    icon: "fa fa-question-circle",
                    displayMode: "once",
                    onClosing: function() { // Khi iziToast bị đóng, đặt lại biến
                        isToastVisible = false;
                    },
                    buttons: [
                        [
                            '<button><i class="fa fa-check"></i> Duyệt</button>',
                            function (instance, toast) {
                                isToastVisible = false; // Đặt lại trạng thái để cho phép hiển thị lần sau
                                instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                                $.post("@Url.Action("ApprovePost", "Admin")", { id: id }, function (response) {
                                    iziToast.show({
                                        title: response.success ? "Thành công!" : "Lỗi!",
                                        message: response.message,
                                        position: "topRight",
                                        color: response.success ? "green" : "red",
                                        timeout: 1000
                                    });

                                    if (response.success) {
                                        updateStatus(id, "Đã duyệt", "bg-success");
                                        toggleButtons(id, "reject");
                                    }
                                }).fail(() => {
                                    iziToast.error({
                                        title: "Lỗi!",
                                        message: "Đã xảy ra lỗi khi duyệt bài đăng.",
                                        position: "topRight"
                                    });
                                });
                            },
                            true
                        ],
                        [
                            '<button><i class="fa fa-times"></i> Hủy</button>',
                            function (instance, toast) {
                                isToastVisible = false; // Đặt lại trạng thái để cho phép hiển thị lần sau
                                instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                            }
                        ]
                    ]
                });
            });

            $(document).off("click", ".reject-house").on("click", ".reject-house", function () {
                //if (isToastVisible) return; // Nếu đang hiển thị thì không mở thêm 
                isToastVisible = true;

                const id = $(this).data("id");

                iziToast.show({
                    class: "iziToast-custom",
                    title: 'Xác nhận từ chối',
                    message: 'Vui lòng nhập lý do từ chối bài đăng:',
                    position: 'center',
                    timeout: false,
                    close: false,
                    overlay: true,
                    icon: 'fa fa-question-circle',
                    drag: false,
                    displayMode: 1,
                    inputs: [
                        [
                            '<textarea id="reject-reason" rows="3" placeholder="Nhập lý do..." style="width:100%;resize:none;" required></textarea>',
                            'keyup',
                            function (instance, toast, input, e) {
                                // Kích hoạt input
                            }
                        ]
                    ],
                    onOpening: function(instance, toast){
                        setTimeout(() => {
                            const textarea = toast.querySelector('#reject-reason');
                            if (textarea) textarea.focus();
                        }, 100); // Delay một chút để đảm bảo toast đã render xong
                    },
                    onClosed: function () {
                        isToastVisible = false; 
                    },
                    buttons: [
                        [
                            '<button><i class="fa fa-times"></i> Từ chối</button>',
                            function (instance, toast, button, e, inputs) {
                                const reason = inputs[0].value.trim();

                                if (!reason) {
                                    iziToast.warning({
                                        title: "Cảnh báo",
                                        message: "Vui lòng nhập lý do.",
                                        position: "topRight"
                                    });
                                    return;
                                }

                                instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                                $.post("@Url.Action("RejectPost", "Admin")", { id: id, reason: reason }, function (response) {
                                    iziToast.show({
                                        title: response.success ? "Thành công!" : "Lỗi!",
                                        message: response.message,
                                        position: "topRight",
                                        color: response.success ? "green" : "red",
                                        timeout: 1000
                                    });

                                    if (response.success) {
                                        updateStatus(id, "Bị từ chối", "bg-danger");
                                        toggleButtons(id, "approve");
                                    }
                                }).fail(() => {
                                    iziToast.error({
                                        title: "Lỗi!",
                                        message: "Đã xảy ra lỗi khi từ chối bài đăng.",
                                        position: "topRight"
                                    });
                                });
                            },
                            true
                        ],
                        [
                            '<button><i class="fa fa-times"></i> Hủy</button>',
                            function (instance, toast) {
                                instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                            }
                        ]
                    ]
                });
            });

            // Hàm cập nhật trạng thái trên giao diện
            function updateStatus(id, statusText, statusClass) {
                const statusCell = $(`tr:has(button[data-id='${id}']) td:nth-child(7)`);
                statusCell.html(`<span class="badge ${statusClass}">${statusText}</span>`);
            }
            
            function toggleButtons(id, action) {
                const row = $(`tr:has(button[data-id='${id}'])`);
                const actionCell = row.find("td:last-child .action-buttons");

                if (action === "reject") {
                    // Đã duyệt → Chuyển sang chỉ còn nút từ chối
                    row.find(".approve-house").remove();

                    // Nếu chưa có nút từ chối thì thêm vào
                    if (actionCell.find(".reject-house").length === 0) {
                        actionCell.append(`
                            <button class="btn btn-sm btn-danger reject-house" data-id="${id}">
                                <i class="fas fa-times"></i> Từ chối
                            </button>
                        `);
                    }
                } else if (action === "approve") {
                    // Bị từ chối → Chuyển sang chỉ còn nút duyệt
                    row.find(".reject-house").remove();

                    // Nếu chưa có nút duyệt thì thêm vào
                    if (actionCell.find(".approve-house").length === 0) {
                        actionCell.append(`
                            <button class="btn btn-sm btn-success approve-house" data-id="${id}">
                                <i class="fas fa-check"></i> Duyệt
                            </button>
                        `);
                    }
                }
            }

            // Tìm kiếm bài đăng
            $("#searchInput").on("keyup", function () {
                const value = $(this).val().toLowerCase();
                $("table tbody tr").filter(function () {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });

            // Bộ lọc nâng cao
            function applyFilters() {
                const searchText = $("#searchInput").val().toLowerCase();
                const selectedStatus = $("#statusFilter").val();
                const selectedUser = $("#userFilter").val();

                $("table tbody tr").each(function () {
                    const row = $(this);
                    const rowText = row.text().toLowerCase();
                    const rowUser = row.find("td:nth-child(5)").text().trim();
                    const rowDate = row.find("td:nth-child(6)").text().trim(); // Ngày đăng
                    const rowStatus = row.find("td:nth-child(7) span").text().trim();

                    const matchesSearch = rowText.indexOf(searchText) > -1;
                    const matchesStatus = !selectedStatus || rowStatus === selectedStatus;
                    const matchesUser = !selectedUser || rowUser === selectedUser;

                    row.toggle(matchesSearch && matchesStatus && matchesUser);
                });
            }

            // Gọi khi input thay đổi
            $("#searchInput, #statusFilter, #userFilter").on("input change", applyFilters);

            function paginateTable(rowsPerPage) {
                const rows = $("table tbody tr:visible");
                const totalRows = rows.length;
                const totalPages = Math.ceil(totalRows / rowsPerPage);

                $("#pagination").empty();

                for (let i = 1; i <= totalPages; i++) {
                    $("#pagination").append(`
                        <li class="page-item${i === 1 ? " active" : ""}">
                            <a class="page-link" href="#">${i}</a>
                        </li>
                    `);
                }

                rows.hide();
                rows.slice(0, rowsPerPage).show();

                $("#pagination .page-link").on("click", function (e) {
                    e.preventDefault();
                    const page = parseInt($(this).text());

                    $("#pagination .page-item").removeClass("active");
                    $(this).parent().addClass("active");

                    const start = (page - 1) * rowsPerPage;
                    const end = start + rowsPerPage;

                    rows.hide().slice(start, end).show();
                });
            }

            // Gọi lại sau khi lọc
            function reapplyPagination() {
                paginateTable(7); // Số dòng mỗi trang
            }
            paginateTable(7); // Lúc đầu hiển thị

            // Gọi lại mỗi khi thay đổi bộ lọc
            $("#searchInput, #statusFilter, #userFilter").on("input change", function () {
                applyFilters();
                reapplyPagination();
            });

            function addHideHandler() {
                document.querySelectorAll(".btn-hide").forEach((button) => {
                    button.onclick = function () {
                        const houseId = this.dataset.id;

                        iziToast.show({
                            class: "iziToast-custom",
                            title: "Xác nhận",
                            message: "Bạn có chắc muốn ẩn bài này? Bài đăng sẽ không hiển thị công khai!",
                            position: "center",
                            timeout: false,
                            close: false,
                            overlay: true,
                            displayMode: "once",
                            drag: false,
                            icon: "fa fa-question-circle",
                            buttons: [
                                [
                                    '<button><i class="fa fa-check"></i> Ẩn ngay</button>',
                                    function (instance, toast) {
                                        instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                                        fetch("/QuanLi/HideHouse", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/x-www-form-urlencoded",
                                            },
                                            body: new URLSearchParams({ id: houseId }),
                                        })
                                            .then((response) => response.json())
                                            .then((data) => {
                                                if (data.success) {
                                                    iziToast.success({
                                                        title: "Thành công!",
                                                        message: data.message,
                                                        position: "topRight",
                                                    });

                                                    updateStatus(houseId, "Đã ẩn do người đăng", "badge bg-secondary text-wrap");

                                                    const row = document.querySelector(`tr:has(button[data-id='${houseId}'])`);
                                                    const btnContainer = row.querySelector(".action-buttons");

                                                    btnContainer.querySelector(".btn-hide")?.remove();
                                                    btnContainer.insertAdjacentHTML("beforeend", `
                                                        <button class="btn btn-sm btn-success btn-show" data-id="${houseId}" title="Hiện bài đăng">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                    `);

                                                    addShowHandler();
                                                } else {
                                                    iziToast.error({
                                                        title: "Lỗi!",
                                                        message: data.message,
                                                        position: "topRight",
                                                    });
                                                }
                                            })
                                            .catch(() => {
                                                iziToast.error({
                                                    title: "Lỗi!",
                                                    message: "Không thể thực hiện yêu cầu!",
                                                    position: "topRight",
                                                });
                                            });
                                    },
                                    true,
                                ],
                                [
                                    '<button><i class="fa fa-times"></i> Hủy</button>',
                                    function (instance, toast) {
                                        instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                                    },
                                ],
                            ],
                        });
                    };
                });
            }

            function addShowHandler() {
                document.querySelectorAll(".btn-show").forEach((button) => {
                    button.onclick = function () {
                        const houseId = this.dataset.id;

                        iziToast.show({
                            class: "iziToast-custom",
                            title: "Xác nhận",
                            message: "Bạn có chắc muốn hiện bài này? Bài đăng sẽ hiển thị công khai trở lại!",
                            position: "center",
                            timeout: false,
                            close: false,
                            overlay: true,
                            displayMode: "once",
                            drag: false,
                            icon: "fa fa-question-circle",
                            buttons: [
                                [
                                    '<button><i class="fa fa-check"></i> Hiện ngay</button>',
                                    function (instance, toast) {
                                        instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                                        fetch("/QuanLi/ShowHouse", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/x-www-form-urlencoded",
                                            },
                                            body: new URLSearchParams({ id: houseId }),
                                        })
                                            .then((response) => response.json())
                                            .then((data) => {
                                                if (data.success) {
                                                    iziToast.success({
                                                        title: "Thành công!",
                                                        message: data.message,
                                                        position: "topRight",
                                                    });

                                                    updateStatus(houseId, "Đã duyệt", "badge bg-success");

                                                    const row = document.querySelector(`tr:has(button[data-id='${houseId}'])`);
                                                    const btnContainer = row.querySelector(".action-buttons");

                                                    btnContainer.querySelector(".btn-show")?.remove();
                                                    btnContainer.insertAdjacentHTML("beforeend", `
                                                        <button class="btn btn-sm btn-secondary btn-hide" data-id="${houseId}" title="Ẩn bài đăng">
                                                            <i class="fas fa-eye-slash"></i>
                                                        </button>
                                                    `);

                                                    addHideHandler();
                                                } else {
                                                    iziToast.error({
                                                        title: "Lỗi!",
                                                        message: data.message,
                                                        position: "topRight",
                                                    });
                                                }
                                            })
                                            .catch(() => {
                                                iziToast.error({
                                                    title: "Lỗi!",
                                                    message: "Không thể thực hiện yêu cầu!",
                                                    position: "topRight",
                                                });
                                            });
                                    },
                                    true,
                                ],
                                [
                                    '<button><i class="fa fa-times"></i> Hủy</button>',
                                    function (instance, toast) {
                                        instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                                    },
                                ],
                            ],
                        });
                    };
                });
            }
            addHideHandler();
            addShowHandler(); 
        });
    </script>
</body>
