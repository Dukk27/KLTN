@model KLTN.Models.House

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    int userRole = ViewBag.UserRole;
}

<head>
    <title>Chi Tiết Nhà</title>
    <link rel="stylesheet" href="~/css/Detail/Detail.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/review.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="~/css/goong-js.css" asp-append-version="true" />
</head>
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            @if (ViewBag.UserRole == 0)
            {
                <a href="@Url.Action("Index", "Admin")">Trang Chủ Admin</a>
            }
            else
            {
                <a href="@Url.Action("Index", "Home")">Trang Chủ</a>
            }
        </li>
        <li class="breadcrumb-item active" aria-current="page">Thông Tin Chi Tiết Bài Đăng Nhà Trọ "@Model.NameHouse"
        </li>
    </ol>
</nav>

<div class="detail-container">
    <h1 class="section-title">Thông Tin Chi Tiết</h1>
    <div class="detail-content">
        <div id="houseImageCarousel" class="carousel slide" data-bs-interval="false">
            <div class="carousel-inner">
                @{
                    int index = 0;
                    foreach (var detail in Model.HouseDetails)
                    {
                        foreach (var image in detail.Image.Split(',', StringSplitOptions.RemoveEmptyEntries))
                        {
                            <div class="carousel-item @(index == 0 ? "active" : "")">
                                <img src="@image" class="d-block w-100 preview-image" alt="Hình ảnh nhà"
                                    onclick="openFullSizeImage(this)">
                            </div>
                            index++;
                        }
                    }
                }
            </div>
            <!-- Nút điều hướng -->
            <button class="carousel-control-prev" type="button" data-bs-target="#houseImageCarousel"
                data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#houseImageCarousel"
                data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>


        <div class="house-info">
            <p><strong>Tên nhà:</strong> @Model.NameHouse</p>
            <p><strong>Loại nhà trọ:</strong> @Model.HouseType.Name</p>

            @foreach (var detail in Model.HouseDetails)
            {
                <table class="table table-bordered">
                    <tbody>
                        <tr>
                            <td><i class="fas fa-map-marker" style="color: #007bff;"></i><strong>Địa chỉ</strong></td>
                            <td>@detail.Address</td>
                            <td><i class="fas fa-money-bill" style="color: #28a745;"></i><strong>Giá tiền</strong></td>
                            <td>@detail.Price.ToString("#,0", new System.Globalization.CultureInfo("vi-VN")) VND</td>
                        </tr>
                        <tr>
                            <td><i class="fas fa-user" style="color: #007bff;"></i><strong>Người liên hệ 1</strong></td>
                            <td>@Model.IdUserNavigation?.UserName</td>
                            <td><i class="fas fa-phone" style="color: #17a2b8;"></i> <strong>Số điện thoại</strong></td>
                            <td colspan="3">@Model.IdUserNavigation?.PhoneNumber</td>
                        </tr>
                        <tr>
                            <td><i class="fas fa-user" style="color: #007bff;"></i><strong>Người liên hệ 2</strong></td>
                            <td>@detail.ContactName2</td>
                            <td><i class="fas fa-phone" style="color: #17a2b8;"></i> <strong>Số điện thoại 2</strong></td>
                            <td colspan="3">@detail.ContactPhone2</td>
                        </tr>
                        <tr>
                            <td> <i class="fas fa-ruler-combined" style="color: #6c757d;"></i><strong>Diện tích</strong>
                            </td>
                            <td>@detail.DienTich m²</td>
                            <td><i class="fas fa-bolt" style="color: #ffc107;"></i><strong> Tiền điện</strong></td>
                            <td>@detail.TienDien VND</td>
                        </tr>
                        <tr>
                            <td><i class="fas fa-tint" style="color: #17a2b8;"></i> <strong>Tiền nước</strong></td>
                            <td>@detail.TienNuoc VND</td>
                            <td><i class="fas fa-coins" style="color: #dc3545;"></i><strong>Tiền dịch vụ</strong></td>
                            <td>@detail.TienDv VND</td>
                        </tr>

                        <tr>
                            <td> <i class="fas fa-check-circle" style="color: #28a745;"></i><strong>Trạng thái</strong></td>
                            <td>
                                @if (detail.Status == "Chưa cho thuê")
                                {
                                    <span class="status-not-rented">Còn phòng</span>
                                }
                                else if (detail.Status == "Đã cho thuê")
                                {
                                    <span class="status-rented">Đã cho thuê</span>
                                }
                            </td>
                            <td> <i class="fas fa-calendar" style="color: #007bff;"></i><strong>Ngày đăng</strong></td>
                            <td>@detail.TimePost.ToString("dd/MM/yyyy")</td>
                        </tr>
                        <tr>
                            <td> <i class="fas fa-info-circle" style="color: #343a40;"></i> <strong>Mô tả</strong></td>
                            <td colspan="3">@detail.Describe</td>
                        </tr>
                    </tbody>
                </table>
            }
        </div>
    </div>

    <!--Chat và Đặt hẹn-->
    <div class="action-buttons">
        @if (ViewBag.CurrentUserId != null && ViewBag.OwnerId != ViewBag.CurrentUserId)
        {
            <a href="@Url.Action("Chat", "Chat", new { conversationId = ViewBag.ConversationId })" class="btn btn-primary">
                <i class="fas fa-comment"></i> Nhắn Tin với Chủ Trọ
            </a>
        }


        <button id="bookAppointmentBtn" class="btn btn-primary"><i class="fas fa-calendar"></i> Đặt lịch hẹn</button>

        <!-- Form đặt lịch hẹn (popup) -->
        <div id="appointmentOverlay" class="appointment-overlay"></div>
        <div id="appointmentForm" class="appointment-form">
            <h3>Đặt Lịch Hẹn Xem Nhà</h3>
            <label for="appointmentDate">Chọn ngày:</label>
            <input type="date" id="appointmentDate" required min="">
            <div class="appointment-buttons">
                <button id="submitAppointment" class="btn btn-success">Xác nhận</button>
                <button id="closeForm" class="btn btn-secondary">Hủy</button>
            </div>
        </div>
        <input type="hidden" id="isAuthenticated" value="@User.Identity.IsAuthenticated.ToString().ToLower()" />
        <input type="hidden" id="userRole" value="@ViewBag.UserRole" />
        <input type="hidden" id="houseOwnerId" value="@Model.IdUserNavigation.IdUser" />
        <input type="hidden" id="currentUserId" value="@ViewBag.currentUserId" />

    </div>

    <h3 class="section-title">Tiện Ích</h3>
    <div class="row">
        @foreach (var amenity in Model.IdAmenities)
        {
            <div class="col-md-3 col-sm-6 col-12 mb-3">
                <div class="amenity-item">
                    <i class="fas fa-check-circle" style="color: green; margin-right: 5px;"></i> @amenity.Name
                </div>
            </div>
        }
    </div>


    <input type="hidden" id="house-address" data-address="@Model.HouseDetails.FirstOrDefault()?.Address" />

    <!-- Bản đồ -->
    <h3 class="section-title">Bản Đồ Vị Trí</h3>

    <div id="map" style="width: 100%; height: 500px; position: relative;">
        <div class="map-style-button" onclick="toggleMapStyleMenu()">Map Styles</div>

        <div class="map-style-menu">
            <button onclick="changeMapStyle('light')">Light</button>
            <button onclick="changeMapStyle('dark')">Dark</button>
            <button onclick="changeMapStyle('navigation-day')">Navigation Day</button>
            <button onclick="changeMapStyle('navigation-night')">Navigation Night</button>
            <button onclick="changeMapStyle('default')">Default</button>
        </div>
        <div id="zoom-in" class="zoom-control" onclick="zoomIn()">
            <button>+</button>
        </div>
        <div id="zoom-out" class="zoom-control" onclick="zoomOut()">
            <button>-</button>
        </div>
        <div id="directions-icon" class="map-icon" onclick="getDirections()">
            <i class="fa fa-directions"></i>
            <span class="icon-text">Get Directions</span>
        </div>
        <div id="locate-icon" class="map-icon" onclick="locateUser()">
            <i class="fa fa-location-arrow"></i>
            <span class="icon-text">Locate Me</span>
        </div>

    </div>

    <h3 class="section-title">Đánh giá:</h3>
    <div class="review-section">
        @if (Model.Reviews != null && Model.Reviews.Any())
        {
            <ul class="review-list">
                @foreach (var review in Model.Reviews)
                {
                    <li class="review-item">
                        <strong>@review.IdUserNavigation.UserName</strong>: @review.Content.ToString()
                        <span>(Rating: @review.Rating ★) </span>
                        <p>Ngày đánh giá: @review.ReviewDate?.ToString("dd/MM/yyyy")</p>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>Chưa có đánh giá nào.</p>
        }
    </div>

    <div class="review-form" data-house-id="@Model?.IdHouse">
        <label for="Rating">Đánh giá:</label>
        <div class="star-rating">
            <input type="radio" name="rating" id="star5" value="5"><label for="star5" title="5 sao"></label>
            <input type="radio" name="rating" id="star4" value="4"><label for="star4" title="4 sao"></label>
            <input type="radio" name="rating" id="star3" value="3"><label for="star3" title="3 sao"></label>
            <input type="radio" name="rating" id="star2" value="2"><label for="star2" title="2 sao"></label>
            <input type="radio" name="rating" id="star1" value="1"><label for="star1" title="1 sao"></label>
        </div>

        <label for="Content">Nội dung đánh giá:</label>
        <textarea id="Content" maxlength="500" required></textarea>

        <p id="reviewMessage" style="display: none;"></p>
        <button type="button" onclick="submitReview()">Gửi đánh giá</button>
    </div>

    <h3 class="section-title">Các Phòng Trọ Khác Của Chủ Nhà</h3>
    <div class="row">
        @if (ViewBag.OtherHouses != null && (ViewBag.OtherHouses as List<KLTN.Models.House>)?.Any() == true)
        {
            @foreach (var otherHouse in ViewBag.OtherHouses as List<KLTN.Models.House>)
            {
                var houseDetailsList = (otherHouse.HouseDetails as IEnumerable<KLTN.Models.HouseDetail>)?.ToList();
                var firstDetail = houseDetailsList != null && houseDetailsList.Count > 0 ? houseDetailsList.First() : null;

                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        @if (firstDetail != null)
                        {
                            <img src="@firstDetail.Image.Split(',')[0]" class="card-img-top" alt="Hình ảnh nhà">
                            <div class="card-body">
                                <h5 class="card-title">@otherHouse.NameHouse</h5>
                                <p class="card-text"><strong>Địa chỉ:</strong> @firstDetail.Address</p>
                                <p class="card-text"><strong>Giá:</strong> @firstDetail.Price.ToString("#,0", new System.Globalization.CultureInfo("vi-VN")) VND</p>
                                <a href="@Url.Action("Detail", "Home", new { id = otherHouse.IdHouse })" class="btn btn-primary">Xem Chi Tiết</a>
                            </div>
                        }
                        else
                        {
                            <div class="card-body">
                                <p class="text-muted">Không có thông tin chi tiết phòng.</p>
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <p class="no-houses-message">Chủ nhà chưa có phòng trọ khác.</p>
            </div>
        }
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/js/iziToast.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/css/iziToast.min.css" />
<script src="~/js/goong-js.js"></script>

<script>
    goongjs.accessToken = "nFXjCGo9PppMz9YGX6S2fLdWnTwQKzCCmCimGy3G"; // MapTiles Key để hiển thị bản đồ
    var map = new goongjs.Map({
        container: "map",
        style: "https://tiles.goong.io/assets/goong_map_web.json",
        center: [105.83991, 21.028], // Tọa độ mặc định (Hà Nội)
        zoom: 15,
    });

    function zoomIn() {
        var currentZoom = map.getZoom();
        if (currentZoom < 20) {
            map.zoomIn();
        }
    }

    function zoomOut() {
        var currentZoom = map.getZoom();
        if (currentZoom > 3) {
            map.zoomOut();
        }
    }

    // Hàm thay đổi kiểu bản đồ
    function changeMapStyle(style) {
        let styleUrl = "";

        // Chọn URL của kiểu bản đồ tương ứng
        switch (style) {
            case "light":
                styleUrl = "https://tiles.goong.io/assets/goong_light_v2.json";
                break;
            case "dark":
                styleUrl = "https://tiles.goong.io/assets/goong_map_dark.json";
                break;
            case "navigation-day":
                styleUrl = "https://tiles.goong.io/assets/navigation_day.json";
                break;
            case "navigation-night":
                styleUrl = "https://tiles.goong.io/assets/navigation_night.json";
                break;
            case "default":
                styleUrl = "https://tiles.goong.io/assets/goong_map_web.json";
                break;
        }

        // Cập nhật kiểu bản đồ
        map.setStyle(styleUrl);
    }

    // Hàm hiển thị/ẩn menu khi người dùng nhấn nút
    function toggleMapStyleMenu() {
        var menu = document.querySelector(".map-style-menu");
        menu.style.display = menu.style.display === "block" ? "none" : "block";
    }

    // Sử dụng API key cho các chức năng geocode, autocomplete, v.v.
    async function setInitialAddress() {
        var addressFromModel =
            document.getElementById("house-address").dataset.address;
        var decodedAddress = new DOMParser().parseFromString(
            addressFromModel,
            "text/html"
        ).body.textContent;
        console.log("Địa chỉ giải mã:", decodedAddress);

        if (decodedAddress) {
            try {
                // Gọi API Geocode với API key
                const response = await fetch(
                    `https://rsapi.goong.io/Geocode?address=${encodeURIComponent(
                        decodedAddress
                    )}&api_key=RJ9d6oO2TLx8s4Q8riMgne1hI905XhC89HxJ7fIy`
                );
                const data = await response.json();
                console.log("Kết quả từ API Goong:", data);

                if (data.results.length > 0) {
                    const { geometry, formatted_address } = data.results[0];
                    map.setCenter([geometry.location.lng, geometry.location.lat]);
                    var marker = new goongjs.Marker({ color: "red" })
                        .setLngLat([geometry.location.lng, geometry.location.lat])
                        .addTo(map)
                        .setPopup(
                            new goongjs.Popup().setHTML(
                                `<strong>Địa chỉ:</strong> ${formatted_address}`
                            )
                        )
                        .togglePopup();
                } else {
                    alert("Không tìm thấy địa chỉ.");
                }
            } catch (error) {
                console.error("Lỗi khi gọi API Geocode:", error);
            }
        } else {
            console.warn("Địa chỉ không hợp lệ.");
        }
    }

    setInitialAddress();

    // Chức năng mở Google Maps để chỉ đường
    function getDirections() {
        var address = document.getElementById("house-address").dataset.address;
        var decodedAddress = decodeHtmlEntities(address);

        if (!decodedAddress) {
            alert("Địa chỉ không hợp lệ.");
            return;
        }

        // Mở Google Maps với địa chỉ đã giải mã
        window.open(
            `https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(
                decodedAddress
            )}`,
            "_blank"
        );
    }

    // Giải mã HTML entities
    function decodeHtmlEntities(input) {
        var doc = new DOMParser().parseFromString(input, "text/html");
        return doc.documentElement.textContent;
    }

    // Định vị vị trí người dùng
    async function locateUser() {
        var address = document.getElementById("house-address").dataset.address;
        var decodedAddress = decodeHtmlEntities(address);

        if (!decodedAddress) {
            alert("Địa chỉ không hợp lệ.");
            return;
        }

        try {
            const response = await fetch(
                `https://rsapi.goong.io/Geocode?address=${encodeURIComponent(
                    decodedAddress
                )}&api_key=RJ9d6oO2TLx8s4Q8riMgne1hI905XhC89HxJ7fIy`
            );
            const data = await response.json();

            if (data.results.length > 0) {
                const { geometry, formatted_address } = data.results[0];
                map.setCenter([geometry.location.lng, geometry.location.lat]);
                var marker = new goongjs.Marker()
                    .setLngLat([geometry.location.lng, geometry.location.lat])
                    .addTo(map)
                    .setPopup(
                        new goongjs.Popup().setHTML(
                            `<strong>Địa chỉ:</strong> ${formatted_address}`
                        )
                    )
                    .togglePopup();
            } else {
                alert("Không tìm thấy vị trí.");
            }
        } catch (error) {
            console.error("Lỗi khi gọi API Geocode:", error);
            alert("Không thể lấy vị trí.");
        }
    }

    // Hiện chi tiết ảnh
    function openFullSizeImage(imgElement) {
        // Tạo div chứa ảnh full màn hình
        var fullScreenDiv = document.createElement("div");
        fullScreenDiv.classList.add("fullscreen-image");

        // Tạo ảnh lớn trong div
        var fullScreenImg = document.createElement("img");
        fullScreenImg.src = imgElement.src;

        // Khi click vào ảnh lớn thì đóng lại
        fullScreenDiv.onclick = function () {
            document.body.removeChild(fullScreenDiv);
        };

        // Thêm ảnh vào div
        fullScreenDiv.appendChild(fullScreenImg);
        document.body.appendChild(fullScreenDiv);
    }

    // Gửi đánh giá
    async function submitReview() {
        let isAuthenticated = document.getElementById("isAuthenticated").value === "true";

        if (!isAuthenticated) {
            iziToast.warning({
                title: "Cảnh báo",
                message: "Bạn cần đăng nhập để gửi đánh giá.",
                position: "topRight",
                timeout: 1000,
            });

            setTimeout(() => {
                window.location.href = "/Account/Login";
            }, 1000);
            return;
        }
        const rating = document.querySelector('input[name="rating"]:checked');
        const content = document.getElementById("Content").value;

        if (!rating || !content) {
            iziToast.warning({
                title: "Cảnh báo",
                message: "Vui lòng nhập đầy đủ thông tin.",
                position: "topRight",
                timeout: 1500,
            });
            return;
        }

        const houseId = document.querySelector(".review-form").dataset.houseId;
        if (!houseId) {
            iziToast.error({
                title: "Lỗi",
                message: "Không tìm thấy IdHouse. Vui lòng thử lại.",
                position: "topRight",
            });
            return;
        }

        const reviewData = {
            Rating: parseInt(rating.value),
            Content: content,
        };

        try {
            const response = await fetch(
                `/api/Detail/house/detail/${houseId}/addreview`,
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(reviewData),
                }
            );

            const result = await response.json();

            if (response.ok) {
                iziToast.success({
                    title: "Thành công",
                    message: result.message,
                    position: "topRight",
                    timeout: 1500,
                });

                setTimeout(() => location.reload(), 1500);
            } else {
                iziToast.error({
                    title: "Lỗi",
                    message: result.message || "Đã xảy ra lỗi khi gửi đánh giá.",
                    position: "topRight",
                    timeout: 1500,
                });
            }
        } catch (error) {
            iziToast.error({
                title: "Lỗi",
                message: "Đã xảy ra lỗi. Vui lòng thử lại.",
                position: "topRight",
                timeout: 1500,
            });
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        let today = new Date().toISOString().split("T")[0];
        document.getElementById("appointmentDate").setAttribute("min", today);

        let isAuthenticated =
            document.getElementById("isAuthenticated").value === "true";
        let houseOwnerId = document.getElementById("houseOwnerId")?.value;
        let currentUserId = document.getElementById("currentUserId")?.value;

        document.getElementById("bookAppointmentBtn").addEventListener("click", function () {
            if (!isAuthenticated) {
                iziToast.warning({
                    title: "Cảnh báo",
                    message: "Bạn cần đăng nhập để đặt lịch hẹn.",
                    position: "topRight",
                    timeout: 1000,
                });

                setTimeout(function () {
                    window.location.href = "/Account/Login";
                }, 1000);

                return;
            }

            if (houseOwnerId === currentUserId) {
                iziToast.error({
                    title: "Lỗi!",
                    message: "Bạn không thể đặt lịch hẹn cho bài đăng của chính mình.",
                    position: "topRight",
                    timeout: 1500,
                });
                return;
            }

            document.getElementById("appointmentForm").style.display = "block";
            document.getElementById("appointmentOverlay").style.display = "block";
        });

        document.getElementById("closeForm").addEventListener("click", function () {
            document.getElementById("appointmentForm").style.display = "none";
            document.getElementById("appointmentOverlay").style.display = "none";
        });

        if (!document.getElementById("submitAppointment").dataset.listenerAdded) {
            document.getElementById("submitAppointment").dataset.listenerAdded = "true";

            document.getElementById("submitAppointment").addEventListener("click", async function (event) {
                event.preventDefault();

                const date = document.getElementById("appointmentDate").value;
                const houseId = document.querySelector(".review-form").dataset.houseId;

                if (!date || date < today) {
                    iziToast.error({
                        title: "Lỗi!",
                        message: "Vui lòng chọn ngày hợp lệ trước khi đặt lịch.",
                        position: "topRight",
                        timeout: 1500,
                    });
                    return;
                }

                const appointmentData = { HouseId: houseId, AppointmentDate: date };

                try {
                    const response = await fetch("/Appointment/Create", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(appointmentData),
                    });

                    const result = await response.json();

                    if (result.success) {
                        iziToast.success({
                            title: "Thành công!",
                            message: result.message,
                            position: "topRight",
                            timeout: 1500,
                        });

                        document.getElementById("appointmentForm").style.display = "none";
                        document.getElementById("appointmentOverlay").style.display = "none";
                    } else {
                        iziToast.error({
                            title: "Lỗi!",
                            message: result.message || "Đã xảy ra lỗi khi đặt lịch.",
                            position: "topRight",
                            timeout: 1000,
                        });
                    }
                } catch (error) {
                    iziToast.warning({
                        title: "Cảnh báo",
                        message: "Bạn cần đăng nhập để đặt lịch hẹn.",
                        position: "topRight",
                        timeout: 1000,
                    });

                    setTimeout(function () {
                        window.location.href = "/Account/Login";
                    }, 1000);
                }
            });
        }
    });
</script>