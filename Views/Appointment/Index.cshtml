@model IEnumerable<KLTN.Models.Appointment>

<link rel="stylesheet" href="~/css/iziToast.css">

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Trang Ch·ªß</a></li>
        <li class="breadcrumb-item active" aria-current="page">Danh S√°ch L·ªãch H·∫πn</li>
    </ol>
</nav>

<h2>Danh S√°ch L·ªãch H·∫πn</h2>

@if (!Model.Any())
{
    <div class="no-appointments">Ch∆∞a c√≥ l·ªãch h·∫πn n√†o cho b√†i ƒëƒÉng c·ªßa b·∫°n.</div>
}
else
{
    <div class="table-container">
        <button class="btn btn-danger delete-selected-btn" disabled>üóë X√≥a ƒë√£ ch·ªçn</button><br>

        <table class="table">
            <thead>
                <tr>
                    <th><input type="checkbox" id="select-all"></th>
                    <th>Ng∆∞·ªùi ƒê·∫∑t H·∫πn</th>
                    <th>Th√¥ng tin li√™n h·ªá</th>
                    <th>T√™n Nh√† Tr·ªç</th>
                    <th>Ng√†y H·∫πn</th>
                    <th>Tr·∫°ng Th√°i</th>
                    <th>H√†nh ƒê·ªông</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var appointment in Model)
                {
                    <tr>
                        <td><input type="checkbox" class="appointment-checkbox" value="@appointment.AppointmentId"></td>
                        <td>@appointment.User?.UserName</td>
                        <td><i class="fas fa-phone"></i>&nbsp;@appointment.User?.PhoneNumber
                            <br />
                            <i class="fas fa-envelope"></i>&nbsp;@appointment.User?.Email
                        </td>
                        <td>@appointment.House?.NameHouse</td>
                        <td>@appointment.AppointmentDate.ToString("dd/MM/yyyy")</td>
                        <td>
                            @if (appointment.Status == AppointmentStatus.Pending)
                            {
                                <span class="badge badge-warning">Ch·ªù x√°c nh·∫≠n</span>
                            }
                            else if (appointment.Status == AppointmentStatus.Confirmed)
                            {
                                <span class="badge badge-success">ƒê√£ x√°c nh·∫≠n</span>
                            }
                            else
                            {
                                <span class="badge badge-danger">ƒê√£ h·ªßy</span>
                            }
                        </td>
                        <td>
                            @if (appointment.Status == AppointmentStatus.Pending)
                            {
                                <button class="btn btn-success confirm-btn" data-id="@appointment.AppointmentId">X√°c nh·∫≠n</button>
                                <button class="btn btn-danger cancel-btn" data-id="@appointment.AppointmentId">H·ªßy</button>
                            }
                            else
                            {
                                <span class="text-muted">Kh√¥ng kh·∫£ d·ª•ng</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}



<script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css">

<script>
    $(document).ready(function () {
        // X√°c nh·∫≠n l·ªãch h·∫πn
        $(document).on("click", ".confirm-btn", function () {
            const id = $(this).data("id");

            iziToast.show({
                class: "iziToast-custom",
                title: "üîî X√°c nh·∫≠n l·ªãch h·∫πn",
                message: "B·∫°n c√≥ ch·∫Øc mu·ªën x√°c nh·∫≠n l·ªãch h·∫πn n√†y?",
                position: "center",
                timeout: false,
                close: false,
                overlay: true,
                buttons: [
                    [
                        '<button><i class="fa fa-check"></i> X√°c nh·∫≠n</button>',
                        function (instance, toast) {
                            instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                            $.post("/Appointment/Confirm", { id: id }, function (response) {
                                iziToast.show({
                                    title: response.success ? "‚úÖ Th√†nh c√¥ng!" : "‚ùå L·ªói!",
                                    message: response.message,
                                    position: "topRight",
                                    color: response.success ? "green" : "red",
                                    timeout: 2000
                                });

                                if (response.success) {
                                    updateStatus(id, "ƒê√£ x√°c nh·∫≠n", "badge-success");
                                    disableActions(id);
                                }
                            }).fail(() => {
                                iziToast.error({
                                    title: "L·ªói!",
                                    message: "ƒê√£ x·∫£y ra l·ªói khi x√°c nh·∫≠n l·ªãch h·∫πn.",
                                    position: "topRight",
                                    timeout: 1500
                                });
                            });
                        },
                        true
                    ],
                    [
                        '<button><i class="fa fa-times"></i> H·ªßy</button>',
                        function (instance, toast) {
                            instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                        }
                    ]
                ]
            });
        });

        // H·ªßy l·ªãch h·∫πn
        $(document).on("click", ".cancel-btn", function () {
            const id = $(this).data("id");

            iziToast.show({
                class: "iziToast-custom",
                title: "üîî X√°c nh·∫≠n h·ªßy l·ªãch h·∫πn",
                message: "B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy l·ªãch h·∫πn n√†y?",
                position: "center",
                timeout: false,
                close: false,
                overlay: true,
                buttons: [
                    [
                        '<button><i class="fa fa-times"></i> H·ªßy l·ªãch</button>',
                        function (instance, toast) {
                            instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                            $.post("/Appointment/Cancel", { id: id }, function (response) {
                                iziToast.show({
                                    title: response.success ? "‚úÖ ƒê√£ h·ªßy!" : "‚ùå L·ªói!",
                                    message: response.message,
                                    position: "topRight",
                                    color: response.success ? "green" : "red",
                                    timeout: 1000
                                });

                                if (response.success) {
                                    updateStatus(id, "ƒê√£ h·ªßy", "badge-danger");
                                    disableActions(id);
                                }
                            }).fail(() => {
                                iziToast.error({
                                    title: "L·ªói!",
                                    message: "ƒê√£ x·∫£y ra l·ªói khi h·ªßy l·ªãch h·∫πn.",
                                    position: "topRight"
                                });
                            });
                        },
                        true
                    ],
                    [
                        '<button><i class="fa fa-times"></i> Quay l·∫°i</button>',
                        function (instance, toast) {
                            instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                        }
                    ]
                ]
            });
        });

        $("#select-all").change(function () {
            $(".appointment-checkbox").prop("checked", this.checked);
            toggleDeleteSelectedButton();
        });

        // Ki·ªÉm tra checkbox t·ª´ng d√≤ng
        $(document).on("change", ".appointment-checkbox", function () {
            if ($(".appointment-checkbox:checked").length === $(".appointment-checkbox").length) {
                $("#select-all").prop("checked", true);
            } else {
                $("#select-all").prop("checked", false);
            }
            toggleDeleteSelectedButton();
        });

        // H√†m b·∫≠t/t·∫Øt n√∫t X√≥a ƒë√£ ch·ªçn
        function toggleDeleteSelectedButton() {
            if ($(".appointment-checkbox:checked").length > 0) {
                $(".delete-selected-btn").prop("disabled", false);
            } else {
                $(".delete-selected-btn").prop("disabled", true);
            }
        }
        
        function checkAndShowNoAppointments() {
            if ($(".appointment-checkbox").length === 0) {
                $(".table-container").remove(); // X√≥a b·∫£ng n·∫øu kh√¥ng c√≤n d·ªØ li·ªáu
                $(".delete-selected-btn").remove(); // X√≥a n√∫t "X√≥a ƒë√£ ch·ªçn"

                // Ki·ªÉm tra n·∫øu th√¥ng b√°o ch∆∞a t·ªìn t·∫°i th√¨ th√™m v√†o
                if ($(".no-appointments").length === 0) {
                    $("h2").after('<div class="no-appointments">Ch∆∞a c√≥ l·ªãch h·∫πn n√†o cho b√†i ƒëƒÉng c·ªßa b·∫°n.</div>');
                }
            }
        }
        // X√≥a c√°c l·ªãch h·∫πn ƒë√£ ch·ªçn
        $(".delete-selected-btn").click(function () {
            const selectedIds = $(".appointment-checkbox:checked").map(function () {
                return $(this).val();
            }).get();

            if (selectedIds.length === 0) return;

            iziToast.show({
                class: "iziToast-custom",
                title: "‚ö† X√≥a l·ªãch h·∫πn ƒë√£ ch·ªçn",
                message: "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√°c l·ªãch h·∫πn ƒë√£ ch·ªçn?",
                position: "center",
                timeout: false,
                close: false,
                overlay: true,
                buttons: [
                    [
                        '<button><i class="fa fa-trash"></i> X√≥a</button>',
                        function (instance, toast) {
                            instance.hide({ transitionOut: "fadeOut" }, toast, "button");

                            $.ajax({
                                url: "/Appointment/DeleteSelected",
                                type: "POST",
                                contentType: "application/json",
                                data: JSON.stringify(selectedIds),
                                success: function (response) {
                                    iziToast.show({
                                        title: response.success ? "‚úÖ Th√†nh c√¥ng!" : "‚ùå L·ªói!",
                                        message: response.message,
                                        position: "topRight",
                                        color: response.success ? "green" : "red",
                                        timeout: 1000
                                    });

                                    if (response.success) {
                                        $(".appointment-checkbox:checked").each(function () {
                                            $(this).closest("tr").remove();
                                        });
                                        toggleDeleteSelectedButton();
                                        checkAndShowNoAppointments();

                                    }
                                },
                                error: function () {
                                    iziToast.error({
                                        title: "L·ªói!",
                                        message: "ƒê√£ x·∫£y ra l·ªói khi x√≥a l·ªãch h·∫πn.",
                                        position: "topRight"
                                    });
                                }
                            });
                        },
                        true
                    ],
                    [
                        '<button><i class="fa fa-times"></i> H·ªßy</button>',
                        function (instance, toast) {
                            instance.hide({ transitionOut: "fadeOut" }, toast, "button");
                        }
                    ]
                ]
            });
        });

        // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i tr√™n giao di·ªán
        function updateStatus(id, statusText, statusClass) {
            const statusCell = $(`tr:has(button[data-id='${id}']) td:nth-child(6)`);
            statusCell.html(`<span class="badge ${statusClass}">${statusText}</span>`);
        }

        // H√†m ·∫©n n√∫t x√°c nh·∫≠n/h·ªßy sau khi x·ª≠ l√Ω xong
        function disableActions(id) {
            const actionCell = $(`tr:has(button[data-id='${id}']) td:nth-child(7)`);
            actionCell.html('<span class="text-muted">Kh√¥ng kh·∫£ d·ª•ng</span>');
        }
    });
</script>

<style>
    h2 {
        font-family: Arial, sans-serif;
        color: #333;
        margin-top: 20px;
        margin-bottom: 20px;
        font-weight: bold;
        text-align: center;
    }

    .table-container {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        margin-top: 20px;
    }

    .table {
        width: 100%;
        max-width: 1300px;
        border-collapse: collapse;
        background: #fff;
        overflow: hidden;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        border: 1px solid #333;
        margin-bottom: 30px;
    }

    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }

    .table th,
    .table td {
        padding: 12px;
        text-align: center;
        border-bottom: 1px solid #ddd;
        border: 1px solid #333;

    }

    .table th {
        background: #f2f2f2;
        color: #555;
        font-weight: bold;
        border-bottom: 2px solid #ddd;
        border: 1px solid #333;
    }

    .table tbody tr:hover {
        background-color: #f9f9f9;
    }

    .table td {
        border-right: 1px solid #333;
    }

    .table th:last-child,
    .table td:last-child {
        border-right: none;
    }

    .badge {
        display: inline-block;
        padding: 6px 12px;
        font-size: 14px;
        border-radius: 15px;
        font-weight: bold;
    }

    .badge-warning {
        background-color: #ffc107;
        color: #fff;
    }

    .badge-success {
        background-color: #28a745;
        color: #fff;
    }

    .badge-danger {
        background-color: #dc3545;
        color: #fff;
    }

    .btn {
        padding: 8px 12px;
        border-radius: 4px;
        text-decoration: none;
        color: white;
        margin-right: 5px;
        transition: background-color 0.3s;
    }

    .btn-success {
        background-color: #28a745;
    }

    .btn-success:hover {
        background-color: #218838;
    }

    .btn-danger {
        background-color: #dc3545;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }

    .btn-warning {
        background-color: #FFA500;
    }

    .btn-warning:hover {
        background-color: #e68900;
    }

    .btn-view-detail {
        background-color: #4CAF50;
    }

    .btn-view-detail:hover {
        background-color: #45a049;
    }

    .container {
        width: 90%;
        margin: auto;
        font-family: Arial, sans-serif;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background-color: #5a6368;
    }

    .no-appointments {
        text-align: center;
        font-size: 18px;
        font-weight: bold;
        color: #555;
        background-color: #f8d7da;
        /* M√†u n·ªÅn nh·∫π nh√†ng */
        border: 1px solid #f5c6cb;
        padding: 15px;
        border-radius: 8px;
        margin-top: 20px;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
    }
</style>
