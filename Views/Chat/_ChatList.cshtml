@model List<KLTN.Models.ConversationViewModel>

@{
    var currentUserId = ViewBag.CurrentUserId;
}

<link rel="stylesheet" href="~/css/iziToast.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/js/iziToast.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/css/iziToast.min.css">

<style>
    .chat-list {
        list-style: none;
        padding: 0;
    }

    .chat-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #ddd;
        cursor: pointer;
    }

    .chat-item:hover {
        background-color: #f1f1f1;
    }

    .chat-meta {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .chat-time {
        margin-top: 25px;
        font-size: 12px;
        color: gray;
        white-space: nowrap;
    }

    .delete-btn {
        background-color: red;
        color: white;
        border: none;
        padding: 5px 10px;
        cursor: pointer;
    }

    .delete-btn:hover {
        background-color: darkred;
    }
</style>

<div class="chatbox-body">
    @if (Model.Any())
    {
        <ul class="chat-list">
            @foreach (var conversation in Model)
            {
                var lastSenderName = conversation.LastSenderId == currentUserId ? "Bạn" : conversation.LastSenderName;

                <li class="chat-item" onclick="openChat('@conversation.ConversationId')">
                    <div class="chat-user">
                        <strong>@conversation.UserName</strong>
                        <br />
                        <small><b>@lastSenderName:</b> @conversation.LastMessage</small>
                    </div>
                    <div class="chat-meta">
                        <small class="chat-time">
                            @(conversation.LastMessageTime?.ToString("HH:mm dd/MM") ?? "")
                        </small>
                        <button class="delete-btn" onclick="deleteConversation(event, '@conversation.ConversationId')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p class="no-messages">Không có cuộc trò chuyện nào.</p>
    }
</div>


<script>
    function openChat(conversationId) {
        window.location.href = "/Chat/Chat?conversationId=" + conversationId;
    }

    function deleteConversation(event, conversationId) {
        event.stopPropagation(); // Ngăn không mở chat khi ấn nút xóa

        iziToast.question({
            class: 'iziToast-custom',
            timeout: 20000,
            close: false,
            overlay: true,
            displayMode: 'once',
            title: 'Xác nhận',
            message: 'Bạn có chắc chắn muốn xóa cuộc trò chuyện này không?',
            position: 'center',
            buttons: [
                ['<button><b>Đồng ý</b></button>', function (instance, toast) {
                    fetch("/Chat/DeleteConversation", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded",
                            "X-Requested-With": "XMLHttpRequest"
                        },
                        body: `conversationId=${encodeURIComponent(conversationId)}`
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                iziToast.success({
                                    title: 'Thành công',
                                    message: 'Hội thoại đã được xóa!',
                                    position: 'topRight',
                                    timeout: 1000
                                });

                                // Xóa hội thoại khỏi danh sách ngay lập tức
                                event.target.closest(".chat-item").remove();
                            } else {
                                iziToast.error({
                                    title: 'Lỗi',
                                    message: data.message,
                                    position: 'topRight'
                                });
                            }
                        })
                        .catch(error => {
                            console.error("Lỗi:", error);
                            iziToast.error({
                                title: 'Lỗi',
                                message: 'Không thể kết nối với máy chủ!',
                                position: 'topRight'
                            });
                        });

                    instance.hide({ transitionOut: 'fadeOut' }, toast, 'button');
                }, true],

                ['<button>Hủy</button>', function (instance, toast) {
                    instance.hide({ transitionOut: 'fadeOut' }, toast, 'button');
                }]
            ]
        });
    }
</script>
