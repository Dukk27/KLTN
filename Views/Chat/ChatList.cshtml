@model List<KLTN.Models.ConversationViewModel>
@{
    var currentConversation = ViewBag.CurrentConversation as KLTN.ViewModels.ManageChatViewModel;
    var currentUserName = ViewBag.CurrentUserName as string;
    var currentUserId = ViewBag.CurrentUserId;
    var receiverId = ViewBag.ReceiverId;
}

<head> 
    <link rel="stylesheet" href="~/css/Chat/chatlist.css" asp-append-version="true" />
</head>

<body>
    <nav aria-label="breadcrumb"> 
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                @if (User.IsInRole("Admin"))
                {
                    <a href="@Url.Action("Index", "Admin")">Trang Chủ</a>
                }
                else
                {
                    <a href="@Url.Action("Index", "Home")">Trang Chủ</a>
                } 
            </li>
            <li class="breadcrumb-item active" aria-current="page">Tin Nhắn</li>
        </ol>
    </nav>

    <div class="wrapper-chatbox shadow rounded border">
        <div class="d-flex" style="height: 80vh;">
            <!-- Danh sách hội thoại (bên trái) -->
            <div class="col-md-3 border-end overflow-auto">
                <div style="text-align: center;">
                    <h4 class="p-3">Danh sách chat</h4>
                </div>
                <div class="row mb-3">
                    <div class="col-12">
                        <div class="input-group mb-3">
                            <span class="input-group-text bg-white border-dark">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text" id="searchInput" class="form-control border-dark" placeholder="Tìm kiếm đoạn chat...">
                        </div>
                    </div>
                </div>
                <ul class="list-group">
                    @foreach (var convo in Model)
                    {
                        <li class="list-group-item custom-chat-item border border-dark rounded mb-1 @(convo.ConversationId == currentConversation?.ConversationId ? "active" : "")">
                            <a href="@Url.Action("ChatList", "Chat", new { conversationId = convo.ConversationId })" class="text-decoration-none text-dark d-block">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="fw-bold user-name">@convo.UserName</div>
                                    <div class="text-muted small">@convo.LastMessageTime?.ToString("dd/MM/yyyy HH:mm")</div>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="text-muted text-truncate" style="max-width: 80%;">
                                        @convo.LastMessage
                                    </div>
                                    @if (convo.HasUnreadMessages && convo.UnreadMessagesCount > 0)
                                    {
                                        <span class="badge bg-danger">@convo.UnreadMessagesCount</span>
                                    }
                                </div>
                            </a>
                        </li>
                    }
                </ul>
            </div>

            <!-- Khung chat bên phải -->
            <div class="col-md-9 d-flex flex-column">
                @if (currentConversation != null)
                {
                    <div class="border-bottom p-3 bg-light">
                        <h5>Đang trò chuyện với: <strong>@currentConversation.ReceiverName</strong></h5>
                    </div>

                    <input type="hidden" id="currentUserId" value="@currentUserId" />
                    <input type="hidden" id="receiverId" value="@currentConversation.ReceiverId" />

                    <div id="messages" class="flex-grow-1 overflow-auto p-3" style="background-color: #f9f9f9;">
                        @foreach (var msg in currentConversation.Messages)
                        {
                            <div class="mb-3 d-flex @(msg.Sender == currentUserName ? "justify-content-end" : "justify-content-start")">
                                <div class="p-2 rounded shadow-sm" style="background-color: @(msg.Sender == currentUserName ? "#d1f7c4" : "#ffffff"); max-width: 40%;">
                                    @* <div class="fw-bold">@msg.Sender</div> *@
                                    <div class="fw-bold">@((msg.Sender == currentUserName) ? "Bạn" : msg.Sender)</div>
                                    <div class="chat-message">@msg.Content</div>
                                    <div class="text-muted small">@msg.Timestamp.ToString("HH:mm dd/MM/yy")</div>
                                </div>
                            </div>
                        }
                    </div>

                    @if (ViewBag.IsReceiverLocked != null && ViewBag.IsReceiverLocked == true)
                    {
                        <div class="text-center p-3" style="background-color:#fff3cd; color:#856404; border:1px solid #ffeeba; border-radius:4px;">
                            Tài khoản này đã bị khoá. Bạn không thể gửi tin nhắn.
                        </div>
                    }
                    else
                    {
                        <div class="border-top p-3 d-flex">
                            <input type="text" id="messageInput" class="form-control me-2" placeholder="Nhập tin nhắn..." />
                            <button id="chat" class="btn btn-primary" onclick="sendMessage()">Gửi</button>
                        </div>
                    }

                }
                else
                {
                    <div class="d-flex flex-column justify-content-center align-items-center h-100">
                        <img src="~/img/login.jpg" alt="Login Illustration" class="mb-3" style="max-width: 300px;" />
                        <h4>Chọn một cuộc trò chuyện để bắt đầu</h4>
                    </div>
                }
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var currentUserId = document.getElementById("currentUserId").value;
            var receiverId = document.getElementById("receiverId").value;

            var connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connection.on("ReceiveMessage", function (senderId, senderName, message, timestamp) {
                if (senderId != currentUserId) {
                    iziToast.info({
                        title: `Tin nhắn từ ${senderName}`,
                        message: message,
                        position: 'topRight',
                        timeout: 5000
                    });
                }
                displayMessage(senderId, senderName, message, timestamp);
            });

            connection.on("SendMessageError", function (errorMessage) {
                alert("Lỗi khi gửi tin nhắn: " + errorMessage);
            });

            function displayMessage(senderId, senderName, message, timestamp) {
                var messagesDiv = document.getElementById("messages");
                var time = new Date(timestamp);
                if (isNaN(time.getTime())) time = new Date();
                var formattedTime = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) + ' ' + time.toLocaleDateString('vi-VN');

                var wrapperDiv = document.createElement("div");
                wrapperDiv.classList.add("mb-3", "d-flex");
                wrapperDiv.classList.add(senderId == currentUserId ? "justify-content-end" : "justify-content-start");

                var msgBox = document.createElement("div");
                msgBox.classList.add("p-2", "rounded", "shadow-sm");
                msgBox.style.backgroundColor = senderId == currentUserId ? "#d1f7c4" : "#ffffff";
                msgBox.style.maxWidth = "40%";

                var nameDiv = document.createElement("div");
                nameDiv.classList.add("fw-bold");
                nameDiv.textContent = senderId == currentUserId ? "Bạn" : senderName;

                var contentDiv = document.createElement("div");
                contentDiv.classList.add("chat-message");
                contentDiv.textContent = message;

                var timeDiv = document.createElement("div");
                timeDiv.classList.add("text-muted", "small");
                timeDiv.textContent = formattedTime;

                msgBox.appendChild(nameDiv);
                msgBox.appendChild(contentDiv);
                msgBox.appendChild(timeDiv);
                wrapperDiv.appendChild(msgBox);
                messagesDiv.appendChild(wrapperDiv);
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            }

            connection.start().then(() => {
                console.log("Kết nối thành công");
            }).catch(err => {
                console.error("Kết nối thất bại:", err.toString());
            });

            window.sendMessage = function () {
                var message = document.getElementById("messageInput").value.trim();
                if (!message) return;

                const senderId = parseInt(currentUserId);
                const receiver = parseInt(receiverId);
                const now = new Date().toISOString();

                connection.invoke("SendMessage", senderId, receiver, message)
                    .then(() => {
                        document.getElementById("messageInput").value = "";
                    })
                    .catch(err => {
                        alert("Gửi thất bại: " + err.toString());
                    });
            };

            document.getElementById("messageInput").addEventListener("keydown", function (event) {
                if (event.key === "Enter" && !event.shiftKey) {
                    event.preventDefault();
                    sendMessage();
                }
            });

            var messagesDiv = document.getElementById("messages");
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        $("#searchInput").on("keyup", function () {
            const value = $(this).val().toLowerCase();
            $(".list-group-item").each(function () {
                const name = $(this).find(".user-name").text().toLowerCase();
                $(this).toggle(name.indexOf(value) > -1);
            });
        });
    </script>
</body>