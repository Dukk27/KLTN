@model KLTN.Models.Account

@{
    ViewData["Title"] = "Ch·ªânh s·ª≠a th√¥ng tin t√†i kho·∫£n";
}

<link rel="stylesheet" href="~/css/iziToast.css">

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Trang Ch·ªß</a></li>
        <li class="breadcrumb-item active" aria-current="page">Ch·ªânh S·ª≠a Th√¥ng Tin T√†i Kho·∫£n @Model.UserName</li>
    </ol>
</nav>

<h2 class="page-title">Ch·ªânh s·ª≠a th√¥ng tin t√†i kho·∫£n</h2>

<form asp-action="Edit" method="post" class="account-form">
    <input type="hidden" asp-for="IdUser" />

    <div class="form-group">
        <label for="UserName" class="form-label">T√™n ƒëƒÉng nh·∫≠p</label>
        <input type="text" class="form-control" id="UserName" name="UserName" value="@Model.UserName" required />
    </div>

    <div class="form-group">
        <label for="PhoneNumber" class="form-label">S·ªë ƒëi·ªán tho·∫°i</label>
        <input type="text" class="form-control" id="PhoneNumber" name="PhoneNumber" value="@Model.PhoneNumber" />
    </div>

    <div class="form-group">
        <label for="Email" class="form-label">Email</label>
        <input type="email" class="form-control" id="Email" name="Email" value="@Model.Email" />
    </div>

    <div class="form-group">
        <label for="Password" class="form-label">M·∫≠t kh·∫©u</label>
        <input type="password" class="form-control" id="Password" name="Password" value="@Model.Password" hidden />

        <button type="button" class="btn btn-warning btn-change-password"
            onclick="window.location.href='@Url.Action("ChangePassword", "Account")'">
            ƒê·ªïi m·∫≠t kh·∫©u
        </button>
    </div>

    <div class="form-group"> 
        <label for="Role" class="form-label">Vai tr√≤</label>
        <input type="text" class="form-control" id="RoleDisplay"
            value="@(Model.Role == 0 ? "Admin" : Model.Role == 1 ? "Ch·ªß tr·ªç" : "Ng∆∞·ªùi t√¨m thu√™")" readonly />

        <!-- Input ·∫©n ƒë·ªÉ gi·ªØ gi√° tr·ªã th·ª±c c·ªßa Role khi g·ª≠i form -->
        <input type="hidden" id="Role" name="Role" value="@Model.Role" />
    </div>

    <div class="form-group" hidden>
        <label for="FreePostUsed" class="form-label">S·ªë b√†i ƒëƒÉng free ƒë√£ d√πng</label>
        <input type="text" class="form-control" id="FreePostsUsed" name="FreePostsUsed" value="@Model.FreePostsUsed"
            readonly />
    </div>

    <div class="button-container">
        <button type="button" class="btn btn-secondary"
            onclick="window.location.href='@Url.Action("Index", "Home")'">ƒê√≥ng</button>
        <button type="submit" class="btn btn-primary">C·∫≠p nh·∫≠t</button>
    </div>
</form>

<style>
    /* CƒÉn gi·ªØa form v√† ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc */
    .account-form {
        width: 600px;
        margin: 40px auto;
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }

    /* Ti√™u ƒë·ªÅ trang */
    .page-title {
        text-align: center;
        color: #5d5d5d;
        margin-top: 20px;
        font-size: 24px;
        font-weight: bold;
    }

    /* Ki·ªÉu cho c√°c nh√≥m nh·∫≠p li·ªáu */
    .form-group {
        margin-bottom: 15px;
    }

    /* Nh√£n (label) */
    .form-label {
        font-weight: bold;
        color: #555;
        display: block;
        margin-bottom: 5px;
    }

    /* √î nh·∫≠p li·ªáu */
    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 14px;
        background-color: #f9f9f9;
    }

    /* N√∫t ƒë·ªïi m·∫≠t kh·∫©u */
    .btn-change-password {
        background-color: #0d6efd;
        border: none;
        color: white;
        font-size: 14px;
        border-radius: 5px;
        cursor: pointer;
        padding: 8px 12px;
        display: block;
        width: fit-content;
    }

    /* N√∫t ƒë·ªïi m·∫≠t kh·∫©u hover */
    .btn-change-password:hover {
        background-color: #0056b3;
    }

    /* N√∫t c·∫≠p nh·∫≠t v√† ƒë√≥ng */
    .button-container {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }

    .btn {
        padding: 8px 12px;
        font-size: 14px;
        border-radius: 5px;
        cursor: pointer;
        width: 48%;
    }

    .btn-primary {
        background-color: #0d6efd;
        border: none;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #f8f9fa;
        border: 1px solid #ccc;
        color: #333;
    }

    .btn-secondary:hover {
        background-color: #e2e6ea;
    }
</style>

<!-- Th√™m iziToast -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/css/iziToast.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/js/iziToast.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelector(".account-form").addEventListener("submit", function (event) {
            event.preventDefault();

            let form = this;
            let formData = new FormData(form);

            iziToast.question({
                timeout: 20000,
                close: false,
                overlay: true,
                displayMode: 'once',
                id: 'question',
                zindex: 999,
                title: 'üîî X√°c nh·∫≠n c·∫≠p nh·∫≠t',
                message: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin kh√¥ng?',
                position: 'center',
                class: 'iziToast-custom', /* √Åp d·ª•ng class m·ªõi */
                buttons: [
                    ['<button><i class="fa fa-check"></i>C√≥, c·∫≠p nh·∫≠t</button>', function (instance, toast) {
                        instance.hide({ transitionOut: 'fadeOut' }, toast, 'button');

                        fetch(form.action, {
                            method: "POST",
                            body: formData
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    iziToast.success({
                                        title: 'Th√†nh c√¥ng!',
                                        message: 'Th√¥ng tin t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.',
                                        position: 'topRight',
                                        timeout: 1500,
                                    });

                                    document.querySelector(".breadcrumb-item.active").innerHTML =
                                        `Ch·ªânh S·ª≠a Th√¥ng Tin T√†i Kho·∫£n ${data.updatedData.userName}`;
                                    document.querySelector("#UserName").value = data.updatedData.userName;
                                    document.querySelector("#PhoneNumber").value = data.updatedData.phoneNumber;
                                    document.querySelector("#Email").value = data.updatedData.email;
                                    document.getElementById("headerUserName").innerText = data.updatedData.userName;

                                } else {
                                    iziToast.error({
                                        title: 'Th·∫•t b·∫°i!',
                                        message: data.message,
                                        position: 'topRight'
                                    });
                                }
                            })
                            .catch(error => {
                                iziToast.error({
                                    title: 'L·ªói h·ªá th·ªëng!',
                                    message: 'Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu, ki·ªÉm tra k·∫øt n·ªëi.',
                                    position: 'topRight'
                                });
                            });

                    }, true],

                    ['<button><i class="fa fa-times"></i> H·ªßy</button>', function (instance, toast) {
                        instance.hide({ transitionOut: 'fadeOut' }, toast, 'button');
                        iziToast.info({
                            title: 'Th√¥ng b√°o',
                            message: 'B·∫°n ƒë√£ h·ªßy c·∫≠p nh·∫≠t.',
                            position: 'topRight'
                        });
                    }]
                ]
            });
        });
    });
</script>
